#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.1.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 31 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 66 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 18 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 92 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 18 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1 49 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
50 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1
          0 2298 0 49 3 16 #"#lang plai-typed"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 7 #"require"
0 0 49 3 1 #" "
0 0 49 3 22 #"plai-typed/s-exp-match"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 25 #";(print-only-errors true)"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 15 #"; Defines Exprc"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 11 #"define-type"
0 0 49 3 6 #" ExprC"
0 0 49 29 1 #"\n"
0 0 49 3 11 #"  [numC (n "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 6 #"number"
0 0 49 3 2 #")]"
0 0 49 29 1 #"\n"
0 0 49 3 10 #"  [idC (s "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 6 #"symbol"
0 0 49 3 2 #")]"
0 0 49 29 1 #"\n"
0 0 49 3 13 #"  [appC (fun "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 6 #"symbol"
0 0 49 3 7 #") (arg "
0 0 49 3 1 #":"
0 0 49 3 2 #" ("
0 0 49 3 6 #"listof"
0 0 49 3 1 #" "
0 0 49 3 5 #"ExprC"
0 0 49 3 3 #"))]"
0 0 49 29 1 #"\n"
0 0 49 3 13 #"  [ifleq0 (t "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 5 #"ExprC"
0 0 49 3 7 #") (iff "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 5 #"ExprC"
0 0 49 3 7 #") (ffi "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 5 #"ExprC"
0 0 49 3 2 #")]"
0 0 49 29 1 #"\n"
0 0 49 3 14 #"  [binop (sym "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 6 #"symbol"
0 0 49 3 5 #") (l "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 5 #"ExprC"
0 0 49 3 5 #") (r "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 5 #"ExprC"
0 0 49 3 3 #")])"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 16 #"; Defines Values"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 11 #"define-type"
0 0 49 3 6 #" Value"
0 0 49 29 1 #"\n"
0 0 49 3 11 #"  [numV (n "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 6 #"number"
0 0 49 3 2 #")]"
0 0 49 29 1 #"\n"
0 0 49 3 15 #"  [booleanV (b "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 7 #"boolean"
0 0 49 3 3 #")])"
0 0 49 29 1 #"\n"
0 0 49 3 1 #" "
0 0 49 29 1 #"\n"
0 0 49 3 1 #";"
0 0 49 3 1 #" "
0 0 49 3 1 #"D"
0 0 49 3 1 #"e"
0 0 49 3 1 #"f"
0 0 49 3 1 #"i"
0 0 49 3 1 #"n"
0 0 49 3 1 #"e"
0 0 49 3 1 #"s"
0 0 49 3 1 #" "
0 0 49 3 1 #"t"
0 0 49 3 2 #"he"
0 0 49 3 1 #" "
0 0 49 3 7 #"Binding"
0 0 49 3 1 #" "
0 0 49 3 4 #"Type"
0 0 49 3 1 #" "
0 0 49 3 5 #"which"
0 0 49 3 1 #" "
0 0 49 3 5 #"takes"
0 0 49 3 1 #" "
0 0 49 3 1 #"a"
0 0 49 3 8 #" symbol "
0 0 49 29 1 #"\n"
0 0 49 3 21 #"; maps it to a number"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 11 #"define-type"
0 0 49 3 8 #" Binding"
0 0 49 29 1 #"\n"
0 0 49 3 14 #"  [bind (name "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 6 #"symbol"
0 0 49 3 7 #") (val "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 5 #"Value"
0 0 49 3 3 #")])"
0 0 49 29 1 #"\n"
0 0 49 3 1 #" "
0 0 49 29 1 #"\n"
0 0 49 3 33 #"; An Alias for a list of bindings"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 17 #"define-type-alias"
0 0 49 3 1 #" "
0 0 49 3 3 #"Env"
0 0 49 3 2 #" ("
0 0 49 3 6 #"listof"
0 0 49 3 1 #" "
0 0 49 3 7 #"Binding"
0 0 49 3 2 #"))"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 14 #" mt-env empty)"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 17 #" extend-env cons)"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 68
#"; Defines the Interpreter. Takes in an ExprC and a list of functions"
0 0 49 29 1 #"\n"
0 0 49 3 64
#"; and then evalutes the ExperC recursively and returns a number."
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 8 #" (eval ["
0 0 49 3 1 #"e"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 5 #"ExprC"
0 0 49 3 3 #"] ["
0 0 49 3 3 #"env"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 3 #"Env"
0 0 49 3 3 #"] ["
0 0 49 3 3 #"fds"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 2 #" ("
0 0 49 3 6 #"listof"
0 0 49 3 1 #" "
0 0 49 3 7 #"FunDefC"
0 0 49 3 4 #")]) "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 5 #"Value"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 9 #"type-case"
0 0 49 3 1 #" "
0 0 49 3 5 #"ExprC"
0 0 49 3 2 #" e"
0 0 49 29 1 #"\n"
0 0 49 3 5 #"    ["
0 0 49 3 4 #"numC"
0 0 49 3 2 #" ("
0 0 49 3 1 #"n"
0 0 49 3 3 #") ("
0 0 49 3 4 #"numV"
0 0 49 3 4 #" n)]"
0 0 49 29 1 #"\n"
0 0 49 3 5 #"    ["
0 0 49 3 3 #"idC"
0 0 49 3 2 #" ("
0 0 49 3 1 #"n"
0 0 49 3 17 #") (lookup n env)]"
0 0 49 29 1 #"\n"
0 0 49 3 5 #"    ["
0 0 49 3 4 #"appC"
0 0 49 3 2 #" ("
0 0 49 3 1 #"f"
0 0 49 3 1 #" "
0 0 49 3 1 #"a"
0 0 49 3 3 #") ("
0 0 49 3 5 #"local"
0 0 49 3 3 #" (["
0 0 49 3 6 #"define"
0 0 49 3 1 #" "
0 0 49 3 2 #"fd"
0 0 49 3 21 #" (get-fundef f fds)])"
0 0 49 29 1 #"\n"
0 0 49 3 19 #"                  ("
0 0 49 3 4 #"cond"
0 0 49 3 44 #" [(not (= (length (fdC-arg fd)) (length a)))"
0 0 49 29 1 #"\n"
0 0 49 3 25 #"                         "
0 0 50 3 7 #"(error "
0 0 50 3 1 #"'"
0 0 50 3 4 #"eval"
0 0 50 3 15 #" \"wrong arity\")"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 25 #"                        ["
0 0 49 3 4 #"else"
0 0 49 3 1 #" "
0 0 49 29 1 #"\n"
0 0 49 3 50 #"                         (eval (fdC-body fd)      "
0 0 49 3 26 #";(FIRST MIGHT BREAK STUFF)"
0 0 49 29 1 #"\n"
0 0 49 3 72
(
 #"                               (get-list-binding a (fdC-arg fd) env "
 #"fds)"
) 0 0 49 29 1 #"\n"
0 0 49 3 31 #"                               "
0 0 49 3 14 #";(extend-env ("
0 0 49 3 4 #"bind"
0 0 49 3 2 #" ("
0 0 49 3 5 #"first"
0 0 49 3 16 #" (fdC-arg fd)) ("
0 0 49 3 4 #"eval"
0 0 49 3 2 #" ("
0 0 49 3 5 #"first"
0 0 49 3 1 #" "
0 0 49 3 1 #"a"
0 0 49 3 19 #") env fds)) mt-env)"
0 0 49 29 1 #"\n"
0 0 49 3 39 #"                               fds)]))]"
0 0 49 29 1 #"\n"
0 0 49 3 4 #"    "
0 0 49 29 1 #"\n"
0 0 49 3 5 #"    ["
0 0 49 3 5 #"binop"
0 0 49 3 2 #" ("
0 0 49 3 1 #"s"
0 0 49 3 1 #" "
0 0 49 3 1 #"l"
0 0 49 3 1 #" "
0 0 49 3 1 #"r"
0 0 49 3 52 #") ((get-binop s) (eval l env fds) (eval r env fds))]"
0 0 49 29 1 #"\n"
0 0 49 3 5 #"    ["
0 0 49 3 6 #"ifleq0"
0 0 49 3 2 #" ("
0 0 49 3 1 #"t"
0 0 49 3 1 #" "
0 0 49 3 3 #"iff"
0 0 49 3 1 #" "
0 0 49 3 3 #"ffi"
0 0 49 3 2 #") "
0 0 50 3 1 #"("
0 0 50 3 4 #"cond"
0 0 50 3 41 #" [(<= (numV-n (eval t env fds)) (numV-n ("
0 0 50 3 4 #"numV"
0 0 50 3 25 #" 0))) (eval iff env fds)]"
0 0 50 29 1 #"\n"
0 0 50 3 31 #"                              ["
0 0 50 3 4 #"else"
0 0 50 3 21 #" (eval ffi env fds)])"
0 0 49 3 3 #"]))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 77
(
 #"; Creates a list of binding from teh fdC-Arg and teh argument to the"
 #" function"
) 0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 20 #" (get-list-binding ["
0 0 49 3 1 #"a"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 2 #" ("
0 0 49 3 6 #"listof"
0 0 49 3 1 #" "
0 0 49 3 5 #"ExprC"
0 0 49 3 2 #")]"
0 0 49 29 1 #"\n"
0 0 49 3 27 #"                          ["
0 0 49 3 4 #"syms"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 2 #" ("
0 0 49 3 6 #"listof"
0 0 49 3 1 #" "
0 0 49 3 6 #"symbol"
0 0 49 3 2 #")]"
0 0 49 29 1 #"\n"
0 0 49 3 27 #"                          ["
0 0 49 3 3 #"env"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 3 #"Env"
0 0 49 3 2 #"] "
0 0 49 29 1 #"\n"
0 0 49 3 27 #"                          ["
0 0 49 3 3 #"fds"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 2 #" ("
0 0 49 3 6 #"listof"
0 0 49 3 1 #" "
0 0 49 3 7 #"FunDefC"
0 0 49 3 4 #")]) "
0 0 49 3 1 #":"
0 0 49 3 2 #" ("
0 0 49 3 6 #"listof"
0 0 49 3 1 #" "
0 0 49 3 7 #"Binding"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"cond"
0 0 49 3 19 #" [(empty? a) empty]"
0 0 49 29 1 #"\n"
0 0 49 3 44 #"        [(not (= (length syms) (length a))) "
0 0 50 3 7 #"(error "
0 0 50 3 1 #"'"
0 0 50 3 13 #"get-list-bing"
0 0 50 3 15 #" \"Wrong Size)\")"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 9 #"        ["
0 0 49 3 4 #"else"
0 0 49 3 8 #" (cons ("
0 0 49 3 4 #"bind"
0 0 49 3 91
(
 #" (first syms) (eval (first a) env fds)) (get-list-binding (rest a) ("
 #"rest syms) env fds))]))"
) 0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 49 29 1 #"\n"
0 0 49 3 62
#"; Looks for a symbol in an env and returns the number that is "
0 0 49 29 1 #"\n"
0 0 49 3 28 #"; represented by the symbol."
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 10 #" (lookup ["
0 0 49 3 3 #"for"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 6 #"symbol"
0 0 49 3 3 #"] ["
0 0 49 3 3 #"env"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 3 #"Env"
0 0 49 3 3 #"]) "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 5 #"Value"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"cond"
0 0 49 29 1 #"\n"
0 0 49 3 18 #"    [(empty? env) "
0 0 50 3 7 #"(error "
0 0 50 3 1 #"'"
0 0 50 3 6 #"lookup"
0 0 50 3 2 #" \""
0 0 50 3 4 #"name"
0 0 50 3 1 #" "
0 0 50 3 11 #"not found\")"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 5 #"    ["
0 0 49 3 4 #"else"
0 0 49 3 2 #" ("
0 0 49 3 4 #"cond"
0 0 49 29 1 #"\n"
0 0 49 3 51 #"            [(symbol=? for (bind-name (first env)))"
0 0 49 29 1 #"\n"
0 0 49 3 36 #"             (bind-val (first env))]"
0 0 49 29 1 #"\n"
0 0 49 3 13 #"            ["
0 0 49 3 4 #"else"
0 0 49 3 1 #" "
0 0 50 3 23 #"(lookup for (rest env))"
0 0 49 3 5 #"])]))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 74
(
 #"; Checks to see if a symbol is a binary operator and returns true if"
 #" it is"
) 0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 18 #" (check-if-binop ["
0 0 49 3 1 #"s"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 6 #"symbol"
0 0 49 3 3 #"]) "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 7 #"boolean"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 50 3 1 #"("
0 0 50 3 4 #"cond"
0 0 50 3 9 #" [(eq? s "
0 0 50 3 1 #"'"
0 0 50 3 1 #"+"
0 0 50 3 7 #") true]"
0 0 50 29 1 #"\n"
0 0 50 3 16 #"        [(eq? s "
0 0 50 3 1 #"'"
0 0 50 3 1 #"*"
0 0 50 3 7 #") true]"
0 0 50 29 1 #"\n"
0 0 50 3 16 #"        [(eq? s "
0 0 50 3 1 #"'"
0 0 50 3 1 #"-"
0 0 50 3 7 #") true]"
0 0 50 29 1 #"\n"
0 0 50 3 16 #"        [(eq? s "
0 0 50 3 1 #"'"
0 0 50 3 1 #"/"
0 0 50 3 7 #") true]"
0 0 50 29 1 #"\n"
0 0 50 3 9 #"        ["
0 0 50 3 4 #"else"
0 0 50 3 8 #" false])"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 74
(
 #"; Checks to see if a symbol is a reserved symbol and returns true if"
 #" it is"
) 0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 28 #" (check-if-reserved-symbol ["
0 0 49 3 1 #"s"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 6 #"symbol"
0 0 49 3 3 #"]) "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 7 #"boolean"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"cond"
0 0 49 3 9 #" [(eq? s "
0 0 49 3 1 #"'"
0 0 49 3 1 #"+"
0 0 49 3 7 #") true]"
0 0 49 29 1 #"\n"
0 0 49 3 16 #"        [(eq? s "
0 0 49 3 1 #"'"
0 0 49 3 1 #"*"
0 0 49 3 2 #") "
0 0 50 3 4 #"true"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 16 #"        [(eq? s "
0 0 49 3 1 #"'"
0 0 49 3 1 #"-"
0 0 49 3 2 #") "
0 0 50 3 4 #"true"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 16 #"        [(eq? s "
0 0 49 3 1 #"'"
0 0 49 3 1 #"/"
0 0 49 3 2 #") "
0 0 50 3 4 #"true"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 16 #"        [(eq? s "
0 0 49 3 1 #"'"
0 0 49 3 6 #"ifleq0"
0 0 49 3 2 #") "
0 0 50 3 4 #"true"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 9 #"        ["
0 0 49 3 4 #"else"
0 0 49 3 9 #" false]))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 73
(
 #"; Gets the function associated with the binary operator and returns "
 #"that "
) 0 0 49 29 1 #"\n"
0 0 49 3 10 #"; operator"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 13 #" (get-binop ["
0 0 49 3 1 #"s"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 6 #"symbol"
0 0 49 3 3 #"]) "
0 0 49 3 1 #":"
0 0 49 3 2 #" ("
0 0 49 3 5 #"Value"
0 0 49 3 1 #" "
0 0 49 3 5 #"Value"
0 0 49 3 1 #" "
0 0 49 3 2 #"->"
0 0 49 3 1 #" "
0 0 49 3 5 #"Value"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"cond"
0 0 49 3 9 #" [(eq? s "
0 0 49 3 1 #"'"
0 0 49 3 1 #"+"
0 0 49 3 7 #") num+]"
0 0 49 29 1 #"\n"
0 0 49 3 9 #"        ["
0 0 50 3 7 #"(eq? s "
0 0 50 3 1 #"'"
0 0 50 3 2 #"*)"
0 0 49 3 1 #" "
0 0 50 3 4 #"num*"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 9 #"        ["
0 0 50 3 7 #"(eq? s "
0 0 50 3 1 #"'"
0 0 50 3 2 #"-)"
0 0 49 3 1 #" "
0 0 50 3 4 #"num-"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 9 #"        ["
0 0 50 3 7 #"(eq? s "
0 0 50 3 1 #"'"
0 0 50 3 2 #"/)"
0 0 49 3 1 #" "
0 0 50 3 4 #"num/"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 9 #"        ["
0 0 49 3 4 #"else"
0 0 49 3 1 #" "
0 0 50 3 7 #"(error "
0 0 50 3 1 #"'"
0 0 50 3 9 #"get-binop"
0 0 50 3 2 #" \""
0 0 50 3 3 #"NOT"
0 0 50 3 1 #" "
0 0 50 3 9 #"A BINOP\")"
0 0 49 3 3 #"]))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 8         322 49 2 #"(\0"
2 #")\0"
63 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 4 #"defi"
7 #"wxtext\0"
3 1 #"n"
7 #"wxtext\0"
3 1 #"e"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"num+"
7 #"wxtext\0"
3 2 #" ["
7 #"wxtext\0"
3 1 #"l"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"Value"
7 #"wxtext\0"
3 3 #"] ["
7 #"wxtext\0"
3 1 #"r"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"Value"
7 #"wxtext\0"
3 3 #"]) "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"Value"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 4 #"cond"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"    [("
7 #"wxtext\0"
3 3 #"and"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"numV?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"l"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 5 #"numV?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"r"
7 #"wxtext\0"
3 2 #"))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"     ("
7 #"wxtext\0"
3 4 #"numV"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 1 #"+"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 6 #"numV-n"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"l"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 6 #"numV-n"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"r"
7 #"wxtext\0"
3 4 #")))]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 5 #"    ["
7 #"wxtext\0"
3 4 #"else"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"     ("
7 #"wxtext\0"
3 5 #"error"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 4 #"num+"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 31 #"\"one argument was not a number\""
7 #"wxtext\0"
3 4 #")]))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 8         322 49 2 #"(\0"
2 #")\0"
63 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 2 #"de"
7 #"wxtext\0"
3 1 #"f"
7 #"wxtext\0"
3 3 #"ine"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"num*"
7 #"wxtext\0"
3 2 #" ["
7 #"wxtext\0"
3 1 #"l"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"Value"
7 #"wxtext\0"
3 3 #"] ["
7 #"wxtext\0"
3 1 #"r"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"Value"
7 #"wxtext\0"
3 3 #"]) "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"Value"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 4 #"cond"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"    [("
7 #"wxtext\0"
3 3 #"and"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"numV?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"l"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 5 #"numV?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"r"
7 #"wxtext\0"
3 2 #"))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"     ("
7 #"wxtext\0"
3 4 #"numV"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 1 #"*"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 6 #"numV-n"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"l"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 6 #"numV-n"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"r"
7 #"wxtext\0"
3 4 #")))]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 5 #"    ["
7 #"wxtext\0"
3 4 #"else"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"     ("
7 #"wxtext\0"
3 5 #"error"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 4 #"num*"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 31 #"\"one argument was not a number\""
7 #"wxtext\0"
3 4 #")]))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 8         322 49 2 #"(\0"
2 #")\0"
63 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 4 #"defi"
7 #"wxtext\0"
3 1 #"n"
7 #"wxtext\0"
3 1 #"e"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"num/"
7 #"wxtext\0"
3 2 #" ["
7 #"wxtext\0"
3 1 #"l"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"Value"
7 #"wxtext\0"
3 3 #"] ["
7 #"wxtext\0"
3 1 #"r"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"Value"
7 #"wxtext\0"
3 3 #"]) "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"Value"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 4 #"cond"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"    [("
7 #"wxtext\0"
3 3 #"and"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"numV?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"l"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 5 #"numV?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"r"
7 #"wxtext\0"
3 2 #"))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"     ("
7 #"wxtext\0"
3 4 #"numV"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 1 #"/"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 6 #"numV-n"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"l"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 6 #"numV-n"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"r"
7 #"wxtext\0"
3 4 #")))]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 5 #"    ["
7 #"wxtext\0"
3 4 #"else"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"     ("
7 #"wxtext\0"
3 5 #"error"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 4 #"num/"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 31 #"\"one argument was not a number\""
7 #"wxtext\0"
3 4 #")]))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 8         322 49 2 #"(\0"
2 #")\0"
63 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 1 #"d"
7 #"wxtext\0"
3 1 #"e"
7 #"wxtext\0"
3 4 #"fine"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"num-"
7 #"wxtext\0"
3 2 #" ["
7 #"wxtext\0"
3 1 #"l"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"Value"
7 #"wxtext\0"
3 3 #"] ["
7 #"wxtext\0"
3 1 #"r"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"Value"
7 #"wxtext\0"
3 3 #"]) "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"Value"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 4 #"cond"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"    [("
7 #"wxtext\0"
3 3 #"and"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"numV?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"l"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 5 #"numV?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"r"
7 #"wxtext\0"
3 2 #"))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"     ("
7 #"wxtext\0"
3 4 #"numV"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 1 #"-"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 6 #"numV-n"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"l"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 6 #"numV-n"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"r"
7 #"wxtext\0"
3 4 #")))]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 5 #"    ["
7 #"wxtext\0"
3 4 #"else"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"     ("
7 #"wxtext\0"
3 5 #"error"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 4 #"num-"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 31 #"\"one argument was not a number\""
7 #"wxtext\0"
3 4 #")]))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 73
(
 #"; Searches through a list of symbols to see if a symbol s is in the "
 #"list."
) 0 0 49 29 1 #"\n"
0 0 49 3 41 #"; returns true if it is, false otherwise."
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 17 #" (check-in-list ["
0 0 49 3 1 #"s"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 6 #"symbol"
0 0 49 3 3 #"] ["
0 0 49 3 3 #"lst"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 2 #" ("
0 0 49 3 6 #"listof"
0 0 49 3 1 #" "
0 0 49 3 6 #"symbol"
0 0 49 3 4 #")]) "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 7 #"boolean"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 50 3 1 #"("
0 0 50 3 4 #"cond"
0 0 50 3 21 #" [(empty? lst) false]"
0 0 50 29 1 #"\n"
0 0 50 3 39 #"        [(symbol=? s (first lst)) true]"
0 0 50 29 1 #"\n"
0 0 50 3 9 #"        ["
0 0 50 3 4 #"else"
0 0 50 3 31 #" (check-in-list s (rest lst))])"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 12 #"; DEPRECATED"
0 0 49 29 1 #"\n"
0 0 49 3 76
(
 #"; Defines the substition function from the book with a modification "
 #"to it to"
) 0 0 49 29 1 #"\n"
0 0 49 3 41 #"; allow for variable number of parameters"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"#;"
0 8         842 49 2 #"(\0"
2 #")\0"
167 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 3 #"def"
7 #"wxtext\0"
3 1 #"i"
7 #"wxtext\0"
3 2 #"ne"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"subst"
7 #"wxtext\0"
3 2 #" ["
7 #"wxtext\0"
3 4 #"what"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 6 #"listof"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"ExprC"
7 #"wxtext\0"
3 4 #")] ["
7 #"wxtext\0"
3 3 #"for"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 6 #"listof"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"symbol"
7 #"wxtext\0"
3 4 #")] ["
7 #"wxtext\0"
3 2 #"in"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 5 #"ExprC"
7 #"wxtext\0"
3 3 #"]) "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"ExprC"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 9 #"type-case"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"ExprC"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 2 #"in"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 5 #"    ["
7 #"wxtext\0"
3 4 #"numC"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 1 #"n"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 2 #"in"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 5 #"    ["
7 #"wxtext\0"
3 3 #"idC"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 4 #"cond"
7 #"wxtext\0"
3 3 #" [("
7 #"wxtext\0"
3 15 #"look-for-symbol"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"for"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 22 #"find-experc-to-replace"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"for"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 4 #"what"
7 #"wxtext\0"
3 2 #")]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 20 #"                   ["
7 #"wxtext\0"
3 4 #"else"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 2 #"in"
7 #"wxtext\0"
3 3 #"])]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 5 #"    ["
7 #"wxtext\0"
3 4 #"appC"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 1 #"f"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"a"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 4 #"appC"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"f"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 20 #"do-sub-for-arguments"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 4 #"what"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"for"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 2 #"in"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"a"
7 #"wxtext\0"
3 3 #"))]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 5 #"    ["
7 #"wxtext\0"
3 6 #"ifleq0"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 1 #"t"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"iff"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"fii"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 6 #"ifleq0"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"subst"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 4 #"what"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"for"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"t"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 33 #"                                ("
7 #"wxtext\0"
3 5 #"subst"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 4 #"what"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"for"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"iff"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 33 #"                                ("
7 #"wxtext\0"
3 5 #"subst"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 4 #"what"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"for"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"fii"
7 #"wxtext\0"
3 3 #"))]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 5 #"    ["
7 #"wxtext\0"
3 5 #"binop"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"iff"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"fii"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 5 #"binop"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"subst"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 4 #"what"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"for"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"iff"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 5 #"subst"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 4 #"what"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"for"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"fii"
7 #"wxtext\0"
3 5 #"))]))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 12 #"; DEPRECATED"
0 0 49 29 1 #"\n"
0 0 49 3 72
(
 #"; Preforms the substition on all the arguments of a function and ret"
 #"urns"
) 0 0 49 29 1 #"\n"
0 0 49 3 49 #"; a list of the substituded variable in the ExprC"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"#;"
0 8         492 49 2 #"(\0"
2 #")\0"
97 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 3 #"def"
7 #"wxtext\0"
3 1 #"i"
7 #"wxtext\0"
3 2 #"ne"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 20 #"do-sub-for-arguments"
7 #"wxtext\0"
3 2 #" ["
7 #"wxtext\0"
3 4 #"what"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 6 #"listof"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"ExprC"
7 #"wxtext\0"
3 3 #")] "
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 31 #"                              ["
7 #"wxtext\0"
3 3 #"for"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 6 #"listof"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"symbol"
7 #"wxtext\0"
3 3 #")] "
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 31 #"                              ["
7 #"wxtext\0"
3 2 #"in"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 5 #"ExprC"
7 #"wxtext\0"
3 2 #"] "
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 31 #"                              ["
7 #"wxtext\0"
3 1 #"a"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 6 #"listof"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"ExprC"
7 #"wxtext\0"
3 4 #")]) "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 6 #"listof"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"ExprC"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 4 #"cond"
7 #"wxtext\0"
3 3 #" [("
7 #"wxtext\0"
3 2 #"or"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 6 #"empty?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"a"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 6 #"empty?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"for"
7 #"wxtext\0"
3 3 #")) "
7 #"wxtext\0"
3 1 #"a"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 9 #"        ["
7 #"wxtext\0"
3 4 #"else"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"cons"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 16 #"               ("
7 #"wxtext\0"
3 5 #"subst"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 4 #"what"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"for"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"first"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"a"
7 #"wxtext\0"
3 3 #")) "
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 16 #"               ("
7 #"wxtext\0"
3 20 #"do-sub-for-arguments"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 4 #"what"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"for"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 2 #"in"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"rest"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"a"
7 #"wxtext\0"
3 6 #")))]))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 12 #"; DEPRECATED"
0 0 49 29 1 #"\n"
0 0 49 3 77
(
 #"; Returns the ExperC for the symbol we are trying to find in look-fo"
 #"r-symbol."
) 0 0 49 29 1 #"\n"
0 0 49 3 62
#"; The needle is the symbol we are looking for in the haystack."
0 0 49 29 1 #"\n"
0 8         347 49 2 #"(\0"
2 #")\0"
68 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 3 #"def"
7 #"wxtext\0"
3 1 #"i"
7 #"wxtext\0"
3 2 #"ne"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 22 #"find-experc-to-replace"
7 #"wxtext\0"
3 2 #" ["
7 #"wxtext\0"
3 6 #"needle"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"symbol"
7 #"wxtext\0"
3 2 #"] "
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 33 #"                                ["
7 #"wxtext\0"
3 8 #"haystack"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 6 #"listof"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"symbol"
7 #"wxtext\0"
3 3 #")] "
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 33 #"                                ["
7 #"wxtext\0"
3 5 #"value"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 6 #"listof"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"ExprC"
7 #"wxtext\0"
3 4 #")]) "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"ExprC"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 4 #"cond"
7 #"wxtext\0"
3 3 #" [("
7 #"wxtext\0"
3 8 #"symbol=?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"needle"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"first"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 8 #"haystack"
7 #"wxtext\0"
3 4 #")) ("
7 #"wxtext\0"
3 5 #"first"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"value"
7 #"wxtext\0"
3 2 #")]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 9 #"        ["
7 #"wxtext\0"
3 4 #"else"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 22 #"find-experc-to-replace"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"needle"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"rest"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 8 #"haystack"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 4 #"rest"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"value"
7 #"wxtext\0"
3 5 #"))]))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 12 #"; DEPRECATED"
0 0 49 29 1 #"\n"
0 0 49 3 57 #"; Tries to find the symbol in the symbol list for subst. "
0 0 49 29 1 #"\n"
0 0 49 3 62
#"; The needle is the symbol we are looking for in the haystack."
0 0 49 29 1 #"\n"
0 0 49 3 39 #"; returns true if the symbol was found."
0 0 49 29 1 #"\n"
0 8         297 49 2 #"(\0"
2 #")\0"
58 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 4 #"defi"
7 #"wxtext\0"
3 1 #"n"
7 #"wxtext\0"
3 1 #"e"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 15 #"look-for-symbol"
7 #"wxtext\0"
3 2 #" ["
7 #"wxtext\0"
3 6 #"needle"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"symbol"
7 #"wxtext\0"
3 3 #"] ["
7 #"wxtext\0"
3 8 #"haystack"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 6 #"listof"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"symbol"
7 #"wxtext\0"
3 4 #")]) "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 7 #"boolean"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 4 #"cond"
7 #"wxtext\0"
3 3 #" [("
7 #"wxtext\0"
3 6 #"empty?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 8 #"haystack"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 5 #"false"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"        [("
7 #"wxtext\0"
3 8 #"symbol=?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"needle"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"first"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 8 #"haystack"
7 #"wxtext\0"
3 3 #")) "
7 #"wxtext\0"
3 4 #"true"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 9 #"        ["
7 #"wxtext\0"
3 4 #"else"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 15 #"look-for-symbol"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"needle"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"rest"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 8 #"haystack"
7 #"wxtext\0"
3 5 #"))]))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 76
(
 #"; Gets the fundefC in fds associated with a symbol n and returns the"
 #" FundefC"
) 0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 14 #" (get-fundef ["
0 0 49 3 1 #"n"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 6 #"symbol"
0 0 49 3 3 #"] ["
0 0 49 3 3 #"fds"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 2 #" ("
0 0 49 3 6 #"listof"
0 0 49 3 1 #" "
0 0 49 3 7 #"FunDefC"
0 0 49 3 4 #")]) "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 7 #"FunDefC"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"cond"
0 0 49 29 1 #"\n"
0 0 49 3 18 #"    [(empty? fds) "
0 0 50 3 7 #"(error "
0 0 50 3 1 #"'"
0 0 50 3 10 #"get-fundef"
0 0 50 3 35 #" \"reference to undefined function\")"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 18 #"    [(cons? fds) ("
0 0 49 3 4 #"cond"
0 0 49 3 1 #" "
0 0 49 29 1 #"\n"
0 0 49 3 66
#"                   [(equal? n (fdC-name (first fds))) (first fds)]"
0 0 49 29 1 #"\n"
0 0 49 3 20 #"                   ["
0 0 49 3 4 #"else"
0 0 49 3 31 #" (get-fundef n (rest fds))])]))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 81
(
 #"; 3.11 Defining a parser that takes an s expression and convert it t"
 #"o an ExperC. "
) 0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 9 #" (parse ["
0 0 49 3 1 #"s"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 12 #"s-expression"
0 0 49 3 3 #"]) "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 5 #"ExprC"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"cond"
0 0 49 29 1 #"\n"
0 0 49 3 24 #"    [(s-exp-number? s) ("
0 0 49 3 4 #"numC"
0 0 49 3 20 #" (s-exp->number s))]"
0 0 49 29 1 #"\n"
0 0 49 3 23 #"    [(s-exp-symbol? s) "
0 0 49 29 1 #"\n"
0 0 49 3 6 #"     ("
0 0 49 3 4 #"cond"
0 0 49 3 47 #" [(check-if-reserved-symbol (s-exp->symbol s)) "
0 0 49 29 1 #"\n"
0 0 49 3 12 #"            "
0 0 50 3 7 #"(error "
0 0 50 3 1 #"'"
0 0 50 3 5 #"parse"
0 0 50 3 20 #" \"invalid input :(\")"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 12 #"           ["
0 0 49 3 4 #"else"
0 0 49 3 2 #" ("
0 0 49 3 3 #"idC"
0 0 49 3 22 #" (s-exp->symbol s))])]"
0 0 49 29 1 #"\n"
0 0 49 3 19 #"    [(s-exp-match? "
0 0 49 3 1 #"'"
0 0 49 3 1 #"{"
0 0 49 3 6 #"ifleq0"
0 0 49 3 1 #" "
0 0 49 3 3 #"ANY"
0 0 49 3 1 #" "
0 0 49 3 3 #"ANY"
0 0 49 3 1 #" "
0 0 49 3 3 #"ANY"
0 0 49 3 5 #"} s) "
0 0 50 3 1 #"("
0 0 50 3 6 #"ifleq0"
0 0 50 29 1 #"\n"
0 0 50 3 77
(
 #"                                             (parse (second (s-exp->"
 #"list s)))"
) 0 0 50 29 1 #"\n"
0 0 50 3 76
(
 #"                                             (parse (third (s-exp->l"
 #"ist s)))"
) 0 0 50 29 1 #"\n"
0 0 50 3 78
(
 #"                                             (parse (fourth (s-exp->"
 #"list s))))"
) 0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"    [("
0 0 49 3 3 #"and"
0 0 49 3 40 #" (s-exp-symbol? (first (s-exp->list s)))"
0 0 49 29 1 #"\n"
0 0 49 3 82
(
 #"          (not(check-if-reserved-symbol (s-exp->symbol (first (s-exp"
 #"->list s))))))"
) 0 0 49 29 1 #"\n"
0 0 49 3 22 #"     (create-appC  s)]"
0 0 49 29 1 #"\n"
0 0 49 3 19 #"    [(s-exp-match? "
0 0 49 3 1 #"'"
0 0 49 3 1 #"{"
0 0 49 3 6 #"SYMBOL"
0 0 49 3 1 #" "
0 0 49 3 3 #"ANY"
0 0 49 3 1 #" "
0 0 49 3 3 #"ANY"
0 0 49 3 4 #"} s)"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"     ("
0 0 49 3 4 #"cond"
0 0 49 3 31 #" [(test-of-operators s second) "
0 0 50 3 7 #"(error "
0 0 50 3 1 #"'"
0 0 50 3 5 #"parse"
0 0 50 3 20 #" \"invalid input :(\")"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 40 #"           [(test-of-operators s third) "
0 0 50 3 7 #"(error "
0 0 50 3 1 #"'"
0 0 50 3 5 #"parse"
0 0 50 3 20 #" \"invalid input :(\")"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 12 #"           ["
0 0 49 3 4 #"else"
0 0 49 3 1 #" "
0 0 49 29 1 #"\n"
0 0 49 3 13 #"            ("
0 0 49 3 5 #"binop"
0 0 49 3 40 #" (s-exp->symbol (first (s-exp->list s)))"
0 0 49 29 1 #"\n"
0 0 49 3 52 #"                   (parse (second (s-exp->list s))) "
0 0 49 29 1 #"\n"
0 0 49 3 54 #"                   (parse (third (s-exp->list s))))])]"
0 0 49 29 1 #"\n"
0 0 49 3 5 #"    ["
0 0 49 3 4 #"else"
0 0 49 3 1 #" "
0 0 50 3 7 #"(error "
0 0 50 3 1 #"'"
0 0 50 3 5 #"parse"
0 0 50 3 20 #" \"invalid input :(\")"
0 0 49 3 3 #"]))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 73
(
 #"; Test to see if symbol is being used that is reserve symbol. Takes "
 #"in an"
) 0 0 49 29 1 #"\n"
0 0 49 3 69
(
 #"; s expression and a position to operate on and then check if it is "
 #"a"
) 0 0 49 29 1 #"\n"
0 0 49 3 17 #"; reserve symbol."
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 21 #" (test-of-operators ["
0 0 49 3 1 #"s"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 12 #"s-expression"
0 0 49 3 2 #"] "
0 0 49 29 1 #"\n"
0 0 49 3 28 #"                           ["
0 0 49 3 8 #"position"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 3 #" (("
0 0 49 3 6 #"listof"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"a"
0 0 49 3 2 #") "
0 0 49 3 2 #"->"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"a"
0 0 49 3 4 #")]) "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 7 #"boolean"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 3 #"and"
0 0 49 3 44 #" (s-exp-symbol? (position (s-exp->list s))) "
0 0 49 29 1 #"\n"
0 0 49 3 79
(
 #"       (check-if-reserved-symbol (s-exp->symbol (position (s-exp->li"
 #"st s)))))) "
) 0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 62
#";Creates and appC by using the map operator on an S expression"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 15 #" (create-appC ["
0 0 49 3 1 #"s"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 12 #"s-expression"
0 0 49 3 3 #"]) "
0 0 49 3 1 #":"
0 0 49 3 2 #"  "
0 0 49 3 5 #"ExprC"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"appC"
0 0 49 3 39 #" (s-exp->symbol(first (s-exp->list s)))"
0 0 49 29 1 #"\n"
0 0 49 3 44 #"        (map parse (rest (s-exp->list s)))))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 55 #"; Defines a datatype for functions to be represented as"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 11 #"define-type"
0 0 49 3 8 #" FunDefC"
0 0 49 29 1 #"\n"
0 0 49 3 13 #"  [fdC (name "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 6 #"symbol"
0 0 49 3 7 #") (arg "
0 0 49 3 1 #":"
0 0 49 3 2 #" ("
0 0 49 3 6 #"listof"
0 0 49 3 1 #" "
0 0 49 3 6 #"symbol"
0 0 49 3 9 #")) (body "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 5 #"ExprC"
0 0 49 3 3 #")])"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 67
#"; Creates a List of symbols from an s-expresssion to be used in fdC"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 15 #" (create-list ["
0 0 49 3 1 #"s"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 12 #"s-expression"
0 0 49 3 3 #"]) "
0 0 49 3 1 #":"
0 0 49 3 2 #" ("
0 0 49 3 6 #"listof"
0 0 49 3 1 #" "
0 0 49 3 6 #"symbol"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 60
#"  (map s-exp->symbol (s-exp->list (third (s-exp->list s)))))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 56 #"; Parses an  s expression and creates a funDef out of it"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 16 #" (parse-fundef ["
0 0 49 3 1 #"s"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 12 #"s-expression"
0 0 49 3 3 #"]) "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 7 #"FunDefC"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"cond"
0 0 49 29 1 #"\n"
0 0 49 3 19 #"    [(s-exp-match? "
0 0 49 3 1 #"'"
0 0 49 3 1 #"{"
0 0 49 3 2 #"fn"
0 0 49 3 1 #" "
0 0 49 3 6 #"SYMBOL"
0 0 49 3 1 #" "
0 0 49 3 3 #"ANY"
0 0 49 3 1 #" "
0 0 49 3 3 #"ANY"
0 0 49 3 4 #"} s)"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"     ("
0 0 49 3 4 #"cond"
0 0 49 3 31 #" [(test-of-operators s second) "
0 0 50 3 7 #"(error "
0 0 50 3 1 #"'"
0 0 50 3 5 #"parse"
0 0 50 3 20 #" \"invalid input :(\")"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 12 #"           ["
0 0 49 3 4 #"else"
0 0 49 3 2 #" ("
0 0 49 3 3 #"fdC"
0 0 49 3 41 #" (s-exp->symbol (second (s-exp->list s)))"
0 0 49 29 1 #"\n"
0 0 49 3 37 #"                      (create-list s)"
0 0 49 29 1 #"\n"
0 0 49 3 58
#"                      (parse (fourth (s-exp->list s))))])]"
0 0 49 29 1 #"\n"
0 0 49 3 5 #"    ["
0 0 49 3 4 #"else"
0 0 49 3 1 #" "
0 0 50 3 7 #"(error "
0 0 50 3 1 #"'"
0 0 50 3 5 #"parse"
0 0 50 3 36 #" \"Function is of the wrong type :(\")"
0 0 49 3 3 #"]))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 49 #";Check to see if a list of symbols has duplicets."
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 20 #" (list-has-no-dups ["
0 0 49 3 1 #"l"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 2 #" ("
0 0 49 3 6 #"listof"
0 0 49 3 1 #" "
0 0 49 3 6 #"symbol"
0 0 49 3 4 #")]) "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 7 #"boolean"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 50 3 1 #"("
0 0 50 3 4 #"cond"
0 0 50 3 18 #" [(empty? l) true]"
0 0 50 29 1 #"\n"
0 0 50 3 9 #"        ["
0 0 50 3 4 #"else"
0 0 50 3 35 #" (check-dupes (first l) (rest l))])"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 75
(
 #"; Takes a symbol and a list and checkes whether that symbol is in th"
 #"e list."
) 0 0 49 29 1 #"\n"
0 0 49 3 48 #"; returns true if the symbol is not in the list."
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 15 #" (check-dupes ["
0 0 49 3 1 #"s"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 6 #"symbol"
0 0 49 3 3 #"] ["
0 0 49 3 1 #"l"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 2 #" ("
0 0 49 3 6 #"listof"
0 0 49 3 1 #" "
0 0 49 3 6 #"symbol"
0 0 49 3 4 #")]) "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 7 #"boolean"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 50 3 1 #"("
0 0 50 3 4 #"cond"
0 0 50 3 18 #" [(empty? l) true]"
0 0 50 29 1 #"\n"
0 0 50 3 9 #"        ["
0 0 50 3 4 #"else"
0 0 50 3 2 #" ("
0 0 50 3 3 #"and"
0 0 50 3 2 #" ("
0 0 50 3 3 #"and"
0 0 50 3 50 #" (not (eq? s (first l))) (check-dupes s (rest l)))"
0 0 50 29 1 #"\n"
0 0 50 3 49 #"                   (list-has-no-dups (rest l)))])"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 72
(
 #"; Parses the s expression and the list of function expressions and t"
 #"hen "
) 0 0 49 29 1 #"\n"
0 0 49 3 12 #"; calls eval"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 12 #" (top-eval ["
0 0 49 3 1 #"s"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 12 #"s-expression"
0 0 49 3 3 #"] ["
0 0 49 3 9 #"fun-sexps"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 2 #" ("
0 0 49 3 6 #"listof"
0 0 49 3 1 #" "
0 0 49 3 12 #"s-expression"
0 0 49 3 4 #")]) "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 5 #"Value"
0 0 49 29 1 #"\n"
0 0 49 3 54 #"  (eval (parse s) empty (map parse-fundef fun-sexps)))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 49 #";===============TEST CASES======================="
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 4 #"test"
0 0 49 3 11 #" (top-eval "
0 0 49 3 1 #"'"
0 0 49 3 1 #"{"
0 0 49 3 1 #"+"
0 0 49 3 1 #" "
0 0 49 3 1 #"1"
0 0 49 3 1 #" "
0 0 49 3 1 #"1"
0 0 49 3 10 #"} empty) ("
0 0 49 3 4 #"numV"
0 0 49 3 4 #" 2))"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 4 #"test"
0 0 49 3 14 #" (eval (parse "
0 0 49 3 1 #"'"
0 0 49 3 1 #"{"
0 0 49 3 1 #"f"
0 0 49 3 1 #" "
0 0 49 3 1 #"1"
0 0 49 3 29 #"}) empty (list (parse-fundef "
0 0 49 3 1 #"'"
0 0 49 3 1 #"{"
0 0 49 3 2 #"fn"
0 0 49 3 1 #" "
0 0 49 3 1 #"p"
0 0 49 3 2 #" {"
0 0 49 3 1 #"x"
0 0 49 3 3 #"} {"
0 0 49 3 1 #"+"
0 0 49 3 1 #" "
0 0 49 3 1 #"x"
0 0 49 3 1 #" "
0 0 49 3 1 #"1"
0 0 49 3 3 #"}})"
0 0 49 29 1 #"\n"
0 0 49 3 47 #"                                 (parse-fundef "
0 0 49 3 1 #"'"
0 0 49 3 1 #"{"
0 0 49 3 2 #"fn"
0 0 49 3 1 #" "
0 0 49 3 1 #"f"
0 0 49 3 2 #" {"
0 0 49 3 1 #"x"
0 0 49 3 3 #"} {"
0 0 49 3 1 #"+"
0 0 49 3 1 #" "
0 0 49 3 1 #"x"
0 0 49 3 1 #" "
0 0 49 3 1 #"1"
0 0 49 3 7 #"}}))) ("
0 0 49 3 4 #"numV"
0 0 49 3 4 #" 2))"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"#;"
0 0 49 3 1 #"("
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 4 #"test"
0 0 49 3 2 #" ("
0 0 49 3 8 #"top-eval"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"{"
0 0 49 3 6 #"ifleq0"
0 0 49 3 2 #" {"
0 0 49 3 1 #"+"
0 0 49 3 1 #" "
0 0 49 3 1 #"1"
0 0 49 3 1 #" "
0 0 49 3 1 #"1"
0 0 49 3 2 #"} "
0 0 49 3 1 #"5"
0 0 49 3 1 #" "
0 0 49 3 2 #"10"
0 0 49 3 2 #"} "
0 0 49 3 5 #"empty"
0 0 49 3 2 #") "
0 0 49 3 2 #"10"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 4 #"test"
0 0 49 3 2 #" ("
0 0 49 3 8 #"top-eval"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"{"
0 0 49 3 1 #"f"
0 0 49 3 1 #" "
0 0 49 3 1 #"1"
0 0 49 3 3 #"} ("
0 0 49 3 4 #"list"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"{"
0 0 49 3 2 #"fn"
0 0 49 3 1 #" "
0 0 49 3 1 #"f"
0 0 49 3 2 #" {"
0 0 49 3 1 #"x"
0 0 49 3 3 #"} {"
0 0 49 3 1 #"+"
0 0 49 3 1 #" "
0 0 49 3 1 #"x"
0 0 49 3 1 #" "
0 0 49 3 1 #"1"
0 0 49 3 5 #"}})) "
0 0 49 3 1 #"2"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 4 #"test"
0 0 49 3 2 #" ("
0 0 49 3 4 #"eval"
0 0 49 3 2 #" ("
0 0 49 3 5 #"parse"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"{"
0 0 49 3 1 #"f"
0 0 49 3 1 #" "
0 0 49 3 1 #"1"
0 0 49 3 3 #"}) "
0 0 49 3 5 #"empty"
0 0 49 3 2 #" ("
0 0 49 3 4 #"list"
0 0 49 3 2 #" ("
0 0 49 3 12 #"parse-fundef"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"{"
0 0 49 3 2 #"fn"
0 0 49 3 1 #" "
0 0 49 3 1 #"p"
0 0 49 3 2 #" {"
0 0 49 3 1 #"x"
0 0 49 3 3 #"} {"
0 0 49 3 1 #"+"
0 0 49 3 1 #" "
0 0 49 3 1 #"x"
0 0 49 3 1 #" "
0 0 49 3 1 #"1"
0 0 49 3 3 #"}})"
0 0 49 29 1 #"\n"
0 0 49 3 34 #"                                 ("
0 0 49 3 12 #"parse-fundef"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"{"
0 0 49 3 2 #"fn"
0 0 49 3 1 #" "
0 0 49 3 1 #"f"
0 0 49 3 2 #" {"
0 0 49 3 1 #"x"
0 0 49 3 3 #"} {"
0 0 49 3 1 #"+"
0 0 49 3 1 #" "
0 0 49 3 1 #"x"
0 0 49 3 1 #" "
0 0 49 3 1 #"1"
0 0 49 3 6 #"}}))) "
0 0 49 3 1 #"2"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 4 #"test"
0 0 49 3 2 #" ("
0 0 49 3 4 #"eval"
0 0 49 3 2 #" ("
0 0 49 3 5 #"parse"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"{"
0 0 49 3 1 #"f"
0 0 49 3 1 #" "
0 0 49 3 1 #"1"
0 0 49 3 3 #"}) "
0 0 49 3 5 #"empty"
0 0 49 3 2 #" ("
0 0 49 3 4 #"list"
0 0 49 3 2 #" ("
0 0 49 3 12 #"parse-fundef"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"{"
0 0 49 3 2 #"fn"
0 0 49 3 1 #" "
0 0 49 3 1 #"f"
0 0 49 3 2 #" {"
0 0 49 3 1 #"x"
0 0 49 3 3 #"} {"
0 0 49 3 1 #"+"
0 0 49 3 1 #" "
0 0 49 3 1 #"x"
0 0 49 3 1 #" "
0 0 49 3 1 #"1"
0 0 49 3 6 #"}}))) "
0 0 49 3 1 #"2"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 4 #"test"
0 0 49 3 2 #" ("
0 0 49 3 4 #"eval"
0 0 49 3 2 #" ("
0 0 49 3 5 #"parse"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"{"
0 0 49 3 1 #"+"
0 0 49 3 2 #" {"
0 0 49 3 1 #"f"
0 0 49 3 3 #"} {"
0 0 49 3 1 #"f"
0 0 49 3 4 #"}}) "
0 0 49 3 5 #"empty"
0 0 49 3 2 #" ("
0 0 49 3 4 #"list"
0 0 49 3 2 #" ("
0 0 49 3 12 #"parse-fundef"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"{"
0 0 49 3 2 #"fn"
0 0 49 3 1 #" "
0 0 49 3 1 #"f"
0 0 49 3 4 #" {} "
0 0 49 3 1 #"5"
0 0 49 3 5 #"}))) "
0 0 49 3 2 #"10"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 8 #"test/exn"
0 0 49 3 2 #" ("
0 0 49 3 4 #"eval"
0 0 49 3 2 #" ("
0 0 49 3 5 #"parse"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"{"
0 0 49 3 1 #"f"
0 0 49 3 1 #" "
0 0 49 3 1 #"1"
0 0 49 3 3 #"}) "
0 0 49 3 5 #"empty"
0 0 49 3 2 #" ("
0 0 49 3 4 #"list"
0 0 49 3 2 #" ("
0 0 49 3 12 #"parse-fundef"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"{"
0 0 49 3 2 #"fn"
0 0 49 3 1 #" "
0 0 49 3 1 #"f"
0 0 49 3 2 #" {"
0 0 49 3 1 #"x"
0 0 49 3 1 #" "
0 0 49 3 1 #"y"
0 0 49 3 3 #"} {"
0 0 49 3 1 #"+"
0 0 49 3 1 #" "
0 0 49 3 1 #"x"
0 0 49 3 1 #" "
0 0 49 3 1 #"y"
0 0 49 3 5 #"}})))"
0 0 49 29 1 #"\n"
0 0 49 3 10 #"          "
0 0 49 3 13 #"\"wrong arity\""
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 4 #"test"
0 0 49 3 2 #" ("
0 0 49 3 4 #"eval"
0 0 49 3 2 #" ("
0 0 49 3 4 #"numC"
0 0 49 3 1 #" "
0 0 49 3 1 #"1"
0 0 49 3 2 #") "
0 0 49 3 5 #"empty"
0 0 49 3 1 #" "
0 0 49 3 5 #"empty"
0 0 49 3 2 #") "
0 0 49 3 1 #"1"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 4 #"test"
0 0 49 3 2 #" ("
0 0 49 3 4 #"eval"
0 0 49 3 2 #" ("
0 0 49 3 6 #"ifleq0"
0 0 49 3 2 #" ("
0 0 49 3 4 #"numC"
0 0 49 3 1 #" "
0 0 49 3 1 #"0"
0 0 49 3 3 #") ("
0 0 49 3 4 #"numC"
0 0 49 3 1 #" "
0 0 49 3 1 #"5"
0 0 49 3 3 #") ("
0 0 49 3 4 #"numC"
0 0 49 3 1 #" "
0 0 49 3 2 #"10"
0 0 49 3 3 #")) "
0 0 49 3 5 #"empty"
0 0 49 3 2 #"  "
0 0 49 3 5 #"empty"
0 0 49 3 2 #") "
0 0 49 3 1 #"5"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 4 #"test"
0 0 49 3 2 #" ("
0 0 49 3 4 #"eval"
0 0 49 3 2 #" ("
0 0 49 3 6 #"ifleq0"
0 0 49 3 2 #" ("
0 0 49 3 4 #"numC"
0 0 49 3 1 #" "
0 0 49 3 1 #"5"
0 0 49 3 3 #") ("
0 0 49 3 4 #"numC"
0 0 49 3 1 #" "
0 0 49 3 1 #"5"
0 0 49 3 3 #") ("
0 0 49 3 4 #"numC"
0 0 49 3 1 #" "
0 0 49 3 2 #"10"
0 0 49 3 3 #")) "
0 0 49 3 5 #"empty"
0 0 49 3 2 #"  "
0 0 49 3 5 #"empty"
0 0 49 3 2 #") "
0 0 49 3 2 #"10"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 4 #"test"
0 0 49 3 2 #" ("
0 0 49 3 5 #"parse"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"{"
0 0 49 3 6 #"ifleq0"
0 0 49 3 1 #" "
0 0 49 3 1 #"2"
0 0 49 3 1 #" "
0 0 49 3 1 #"3"
0 0 49 3 1 #" "
0 0 49 3 1 #"4"
0 0 49 3 4 #"}) ("
0 0 49 3 6 #"ifleq0"
0 0 49 3 2 #" ("
0 0 49 3 4 #"numC"
0 0 49 3 1 #" "
0 0 49 3 1 #"2"
0 0 49 3 3 #") ("
0 0 49 3 4 #"numC"
0 0 49 3 1 #" "
0 0 49 3 1 #"3"
0 0 49 3 3 #") ("
0 0 49 3 4 #"numC"
0 0 49 3 1 #" "
0 0 49 3 1 #"4"
0 0 49 3 3 #")))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"#;"
0 8         867 49 2 #"(\0"
2 #")\0"
172 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 4 #"test"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"subst"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"list"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"numC"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"3"
7 #"wxtext\0"
3 4 #")) ("
7 #"wxtext\0"
3 4 #"list"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 1 #"x"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 4 #"numC"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"3"
7 #"wxtext\0"
3 4 #")) ("
7 #"wxtext\0"
3 4 #"numC"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"3"
7 #"wxtext\0"
3 2 #"))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 4 #"test"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"subst"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"list"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"numC"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"3"
7 #"wxtext\0"
3 4 #")) ("
7 #"wxtext\0"
3 4 #"list"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 1 #"x"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 3 #"idC"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 1 #"x"
7 #"wxtext\0"
3 4 #")) ("
7 #"wxtext\0"
3 4 #"numC"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"3"
7 #"wxtext\0"
3 2 #"))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 4 #"test"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"subst"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"list"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"numC"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"3"
7 #"wxtext\0"
3 4 #")) ("
7 #"wxtext\0"
3 4 #"list"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 1 #"y"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 3 #"idC"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 1 #"x"
7 #"wxtext\0"
3 4 #")) ("
7 #"wxtext\0"
3 3 #"idC"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 1 #"x"
7 #"wxtext\0"
3 2 #"))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 4 #"test"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"subst"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"list"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"numC"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"5"
7 #"wxtext\0"
3 4 #")) ("
7 #"wxtext\0"
3 4 #"list"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 1 #"x"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 4 #"appC"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 1 #"f"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"list"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"numC"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"5"
7 #"wxtext\0"
3 4 #"))))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 7 #"      ("
7 #"wxtext\0"
3 4 #"appC"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 1 #"f"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"list"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"numC"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"5"
7 #"wxtext\0"
3 4 #"))))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 4 #"test"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"subst"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"list"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"numC"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"6"
7 #"wxtext\0"
3 4 #")) ("
7 #"wxtext\0"
3 4 #"list"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 1 #"x"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 1 #"y"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 6 #"ifleq0"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"numC"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"3"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 4 #"numC"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"5"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 4 #"numC"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 2 #"10"
7 #"wxtext\0"
3 3 #")))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 7 #"      ("
7 #"wxtext\0"
3 6 #"ifleq0"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"numC"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"3"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 4 #"numC"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"5"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 4 #"numC"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 2 #"10"
7 #"wxtext\0"
3 3 #")))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 4 #"test"
0 0 49 3 2 #" ("
0 0 49 3 14 #"check-if-binop"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"+"
0 0 49 3 2 #") "
0 0 49 3 4 #"true"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 4 #"test"
0 0 49 3 2 #" ("
0 0 49 3 14 #"check-if-binop"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"*"
0 0 49 3 2 #") "
0 0 49 3 4 #"true"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 4 #"test"
0 0 49 3 2 #" ("
0 0 49 3 14 #"check-if-binop"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"-"
0 0 49 3 2 #") "
0 0 49 3 4 #"true"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 4 #"test"
0 0 49 3 2 #" ("
0 0 49 3 14 #"check-if-binop"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"/"
0 0 49 3 2 #") "
0 0 49 3 4 #"true"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 4 #"test"
0 0 49 3 2 #" ("
0 0 49 3 14 #"check-if-binop"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"f"
0 0 49 3 2 #") "
0 0 49 3 5 #"false"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 4 #"test"
0 0 49 3 2 #" ("
0 0 49 3 13 #"check-in-list"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"d"
0 0 49 3 1 #" "
0 0 49 3 5 #"empty"
0 0 49 3 2 #") "
0 0 49 3 5 #"false"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 4 #"test"
0 0 49 3 2 #" ("
0 0 49 3 13 #"check-in-list"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"a"
0 0 49 3 2 #" ("
0 0 49 3 4 #"list"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"b"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"c"
0 0 49 3 3 #")) "
0 0 49 3 5 #"false"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 4 #"test"
0 0 49 3 2 #" ("
0 0 49 3 13 #"check-in-list"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"a"
0 0 49 3 2 #" ("
0 0 49 3 4 #"list"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"b"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"a"
0 0 49 3 3 #")) "
0 0 49 3 4 #"true"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 4 #"test"
0 0 49 3 2 #" ("
0 0 49 3 9 #"get-binop"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"+"
0 0 49 3 2 #") "
0 0 49 3 1 #"+"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 4 #"test"
0 0 49 3 2 #" ("
0 0 49 3 9 #"get-binop"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"*"
0 0 49 3 2 #") "
0 0 49 3 1 #"*"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 4 #"test"
0 0 49 3 2 #" ("
0 0 49 3 9 #"get-binop"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"-"
0 0 49 3 2 #") "
0 0 49 3 1 #"-"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 4 #"test"
0 0 49 3 2 #" ("
0 0 49 3 9 #"get-binop"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"/"
0 0 49 3 2 #") "
0 0 49 3 1 #"/"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 8 #"test/exn"
0 0 49 3 2 #" ("
0 0 49 3 9 #"get-binop"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"f"
0 0 49 3 2 #") "
0 0 49 3 13 #"\"NOT A BINOP\""
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 8 #"test/exn"
0 0 49 3 2 #" ("
0 0 49 3 12 #"parse-fundef"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"{"
0 0 49 3 1 #"f"
0 0 49 3 1 #" "
0 0 49 3 1 #"0"
0 0 49 3 1 #" "
0 0 49 3 1 #"1"
0 0 49 3 1 #" "
0 0 49 3 1 #"5"
0 0 49 3 1 #" "
0 0 49 3 1 #"2"
0 0 49 3 1 #" "
0 0 49 3 1 #"4"
0 0 49 3 1 #" "
0 0 49 3 1 #"8"
0 0 49 3 3 #"}) "
0 0 49 3 31 #"\"Function is of the wrong type\""
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 4 #"test"
0 0 49 3 2 #" ("
0 0 49 3 16 #"list-has-no-dups"
0 0 49 3 2 #" ("
0 0 49 3 4 #"list"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"a"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"b"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"c"
0 0 49 3 3 #")) "
0 0 49 3 4 #"true"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 4 #"test"
0 0 49 3 2 #" ("
0 0 49 3 16 #"list-has-no-dups"
0 0 49 3 2 #" ("
0 0 49 3 4 #"list"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"a"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"a"
0 0 49 3 3 #")) "
0 0 49 3 5 #"false"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 8 #"test/exn"
0 0 49 3 2 #" ("
0 0 49 3 10 #"get-fundef"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"a"
0 0 49 3 1 #" "
0 0 49 3 5 #"empty"
0 0 49 3 2 #") "
0 0 49 3 33 #"\"reference to undefined function\""
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 4 #"test"
0 0 49 3 2 #" ("
0 0 49 3 4 #"eval"
0 0 49 3 2 #" ("
0 0 49 3 5 #"parse"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"{"
0 0 49 3 5 #"minus"
0 0 49 3 1 #" "
0 0 49 3 1 #"8"
0 0 49 3 1 #" "
0 0 49 3 1 #"5"
0 0 49 3 3 #"}) "
0 0 49 3 5 #"empty"
0 0 49 3 2 #"  "
0 0 49 29 1 #"\n"
0 0 49 3 13 #"            ("
0 0 49 3 4 #"list"
0 0 49 3 2 #" ("
0 0 49 3 12 #"parse-fundef"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"{"
0 0 49 3 2 #"fn"
0 0 49 3 1 #" "
0 0 49 3 5 #"minus"
0 0 49 3 2 #" ("
0 0 49 3 1 #"x"
0 0 49 3 1 #" "
0 0 49 3 1 #"y"
0 0 49 3 3 #") ("
0 0 49 3 1 #"+"
0 0 49 3 1 #" "
0 0 49 3 1 #"x"
0 0 49 3 2 #" ("
0 0 49 3 1 #"*"
0 0 49 3 1 #" "
0 0 49 3 2 #"-1"
0 0 49 3 1 #" "
0 0 49 3 1 #"y"
0 0 49 3 7 #"))}))) "
0 0 49 3 1 #"3"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 4 #"test"
0 0 49 3 2 #" ("
0 0 49 3 4 #"eval"
0 0 49 3 2 #" ("
0 0 49 3 5 #"parse"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"{"
0 0 49 3 5 #"minus"
0 0 49 3 1 #" "
0 0 49 3 1 #"5"
0 0 49 3 3 #"}) "
0 0 49 3 5 #"empty"
0 0 49 3 2 #"  "
0 0 49 29 1 #"\n"
0 0 49 3 13 #"            ("
0 0 49 3 4 #"list"
0 0 49 3 2 #" ("
0 0 49 3 12 #"parse-fundef"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"{"
0 0 49 3 2 #"fn"
0 0 49 3 1 #" "
0 0 49 3 5 #"minus"
0 0 49 3 2 #" ("
0 0 49 3 1 #"y"
0 0 49 3 3 #") ("
0 0 49 3 1 #"*"
0 0 49 3 1 #" "
0 0 49 3 2 #"-1"
0 0 49 3 1 #" "
0 0 49 3 1 #"y"
0 0 49 3 6 #")}))) "
0 0 49 3 2 #"-5"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 4 #"test"
0 0 49 3 2 #" ("
0 0 49 3 4 #"eval"
0 0 49 3 2 #" ("
0 0 49 3 5 #"parse"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"{"
0 0 49 3 5 #"seven"
0 0 49 3 3 #"}) "
0 0 49 3 5 #"empty"
0 0 49 3 2 #"  "
0 0 49 29 1 #"\n"
0 0 49 3 13 #"            ("
0 0 49 3 4 #"list"
0 0 49 3 2 #" ("
0 0 49 3 12 #"parse-fundef"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"{"
0 0 49 3 2 #"fn"
0 0 49 3 1 #" "
0 0 49 3 5 #"seven"
0 0 49 3 5 #" () ("
0 0 49 3 5 #"minus"
0 0 49 3 2 #" ("
0 0 49 3 1 #"+"
0 0 49 3 1 #" "
0 0 49 3 1 #"3"
0 0 49 3 1 #" "
0 0 49 3 2 #"10"
0 0 49 3 3 #") ("
0 0 49 3 1 #"*"
0 0 49 3 1 #" "
0 0 49 3 1 #"2"
0 0 49 3 1 #" "
0 0 49 3 1 #"3"
0 0 49 3 5 #"))}) "
0 0 49 29 1 #"\n"
0 0 49 3 19 #"                  ("
0 0 49 3 12 #"parse-fundef"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"{"
0 0 49 3 2 #"fn"
0 0 49 3 1 #" "
0 0 49 3 5 #"minus"
0 0 49 3 2 #" ("
0 0 49 3 1 #"x"
0 0 49 3 1 #" "
0 0 49 3 1 #"y"
0 0 49 3 3 #") ("
0 0 49 3 1 #"+"
0 0 49 3 1 #" "
0 0 49 3 1 #"x"
0 0 49 3 2 #" ("
0 0 49 3 1 #"*"
0 0 49 3 1 #" "
0 0 49 3 2 #"-1"
0 0 49 3 1 #" "
0 0 49 3 1 #"y"
0 0 49 3 7 #"))}))) "
0 0 49 3 1 #"7"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 4 #"test"
0 0 49 3 2 #" ("
0 0 49 3 4 #"eval"
0 0 49 3 2 #" ("
0 0 49 3 5 #"parse"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"{"
0 0 49 3 5 #"twice"
0 0 49 3 1 #" "
0 0 49 3 2 #"15"
0 0 49 3 3 #"}) "
0 0 49 3 5 #"empty"
0 0 49 3 2 #"  "
0 0 49 29 1 #"\n"
0 0 49 3 13 #"            ("
0 0 49 3 4 #"list"
0 0 49 3 2 #" ("
0 0 49 3 12 #"parse-fundef"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"{"
0 0 49 3 2 #"fn"
0 0 49 3 1 #" "
0 0 49 3 9 #"realtwice"
0 0 49 3 2 #" ("
0 0 49 3 1 #"x"
0 0 49 3 3 #") ("
0 0 49 3 1 #"+"
0 0 49 3 1 #" "
0 0 49 3 1 #"x"
0 0 49 3 1 #" "
0 0 49 3 1 #"x"
0 0 49 3 4 #")}) "
0 0 49 29 1 #"\n"
0 0 49 3 19 #"                  ("
0 0 49 3 12 #"parse-fundef"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"{"
0 0 49 3 2 #"fn"
0 0 49 3 1 #" "
0 0 49 3 5 #"twice"
0 0 49 3 2 #" ("
0 0 49 3 1 #"x"
0 0 49 3 3 #") ("
0 0 49 3 9 #"realtwice"
0 0 49 3 1 #" "
0 0 49 3 1 #"x"
0 0 49 3 6 #")}))) "
0 0 49 3 2 #"30"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 4 #"test"
0 0 49 3 2 #" ("
0 0 49 3 12 #"parse-fundef"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"{"
0 0 49 3 2 #"fn"
0 0 49 3 1 #" "
0 0 49 3 1 #"p"
0 0 49 3 2 #" {"
0 0 49 3 1 #"x"
0 0 49 3 3 #"} {"
0 0 49 3 1 #"+"
0 0 49 3 1 #" "
0 0 49 3 1 #"x"
0 0 49 3 1 #" "
0 0 49 3 1 #"1"
0 0 49 3 5 #"}}) ("
0 0 49 3 3 #"fdC"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"p"
0 0 49 3 2 #" ("
0 0 49 3 4 #"list"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"x"
0 0 49 3 3 #") ("
0 0 49 3 5 #"binop"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"+"
0 0 49 3 2 #" ("
0 0 49 3 3 #"idC"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"x"
0 0 49 3 3 #") ("
0 0 49 3 4 #"numC"
0 0 49 3 1 #" "
0 0 49 3 1 #"1"
0 0 49 3 4 #"))))"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 8 #"test/exn"
0 0 49 3 2 #" ("
0 0 49 3 5 #"parse"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"{"
0 0 49 3 1 #"+"
0 0 49 3 1 #" "
0 0 49 3 1 #"/"
0 0 49 3 1 #" "
0 0 49 3 1 #"3"
0 0 49 3 3 #"}) "
0 0 49 3 18 #"\"invalid input :(\""
0 0 49 3 2 #") "
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 8 #"test/exn"
0 0 49 3 2 #" ("
0 0 49 3 5 #"parse"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"{"
0 0 49 3 1 #"+"
0 0 49 3 1 #" "
0 0 49 3 1 #"2"
0 0 49 3 1 #" "
0 0 49 3 1 #"*"
0 0 49 3 3 #"}) "
0 0 49 3 18 #"\"invalid input :(\""
0 0 49 3 2 #") "
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 8 #"test/exn"
0 0 49 3 2 #" ("
0 0 49 3 5 #"parse"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"{"
0 0 49 3 1 #"+"
0 0 49 3 1 #" "
0 0 49 3 1 #"-"
0 0 49 3 1 #" "
0 0 49 3 1 #"3"
0 0 49 3 3 #"}) "
0 0 49 3 18 #"\"invalid input :(\""
0 0 49 3 2 #") "
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 8 #"test/exn"
0 0 49 3 2 #" ("
0 0 49 3 5 #"parse"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"{"
0 0 49 3 1 #"+"
0 0 49 3 1 #" "
0 0 49 3 6 #"ifleq0"
0 0 49 3 1 #" "
0 0 49 3 1 #"*"
0 0 49 3 3 #"}) "
0 0 49 3 18 #"\"invalid input :(\""
0 0 49 3 2 #") "
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 8 #"test/exn"
0 0 49 3 2 #" ("
0 0 49 3 5 #"parse"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"{"
0 0 49 3 1 #"+"
0 0 49 3 1 #" "
0 0 49 3 1 #"+"
0 0 49 3 1 #" "
0 0 49 3 1 #"*"
0 0 49 3 3 #"}) "
0 0 49 3 18 #"\"invalid input :(\""
0 0 49 3 2 #") "
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 8 #"test/exn"
0 0 49 3 2 #" ("
0 0 49 3 12 #"parse-fundef"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"{"
0 0 49 3 2 #"fn"
0 0 49 3 1 #" "
0 0 49 3 1 #"+"
0 0 49 3 4 #" () "
0 0 49 3 2 #"13"
0 0 49 3 3 #"}) "
0 0 49 3 18 #"\"invalid input :(\""
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 8 #"test/exn"
0 0 49 3 2 #" ("
0 0 49 3 5 #"parse"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"{"
0 0 49 3 6 #"ifleq0"
0 0 49 3 3 #"}) "
0 0 49 3 18 #"\"invalid input :(\""
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 8 #"test/exn"
0 0 49 3 2 #" ("
0 0 49 3 5 #"parse"
0 0 49 3 1 #" "
0 0 49 3 1 #"`"
0 0 49 3 6 #"ifleq0"
0 0 49 3 2 #") "
0 0 49 3 18 #"\"invalid input :(\""
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 4 #"test"
0 0 49 3 2 #" ("
0 0 49 3 12 #"parse-fundef"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"{"
0 0 49 3 2 #"fn"
0 0 49 3 1 #" "
0 0 49 3 5 #"twice"
0 0 49 3 2 #" ("
0 0 49 3 1 #"x"
0 0 49 3 3 #") ("
0 0 49 3 9 #"realtwice"
0 0 49 3 1 #" "
0 0 49 3 1 #"x"
0 0 49 3 5 #")}) ("
0 0 49 3 3 #"fdC"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 5 #"twice"
0 0 49 3 2 #" ("
0 0 49 3 4 #"list"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"x"
0 0 49 3 3 #") ("
0 0 49 3 4 #"appC"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 9 #"realtwice"
0 0 49 3 2 #" ("
0 0 49 3 4 #"list"
0 0 49 3 2 #" ("
0 0 49 3 3 #"idC"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"x"
0 0 49 3 5 #")))))"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 4 #"test"
0 0 49 3 2 #" ("
0 0 49 3 12 #"parse-fundef"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"{"
0 0 49 3 2 #"fn"
0 0 49 3 1 #" "
0 0 49 3 5 #"minus"
0 0 49 3 2 #" ("
0 0 49 3 1 #"x"
0 0 49 3 1 #" "
0 0 49 3 1 #"y"
0 0 49 3 3 #") ("
0 0 49 3 1 #"+"
0 0 49 3 1 #" "
0 0 49 3 1 #"x"
0 0 49 3 2 #" ("
0 0 49 3 1 #"*"
0 0 49 3 1 #" "
0 0 49 3 2 #"-1"
0 0 49 3 1 #" "
0 0 49 3 1 #"y"
0 0 49 3 6 #"))}) ("
0 0 49 3 3 #"fdC"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 5 #"minus"
0 0 49 3 2 #" ("
0 0 49 3 4 #"list"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"x"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"y"
0 0 49 3 3 #") ("
0 0 49 3 5 #"binop"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"+"
0 0 49 3 2 #" ("
0 0 49 3 3 #"idC"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"x"
0 0 49 3 3 #") ("
0 0 49 3 5 #"binop"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"*"
0 0 49 3 2 #" ("
0 0 49 3 4 #"numC"
0 0 49 3 1 #" "
0 0 49 3 2 #"-1"
0 0 49 3 3 #") ("
0 0 49 3 3 #"idC"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"y"
0 0 49 3 5 #")))))"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 4 #"test"
0 0 49 3 2 #" ("
0 0 49 3 12 #"parse-fundef"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"{"
0 0 49 3 2 #"fn"
0 0 49 3 1 #" "
0 0 49 3 9 #"realtwice"
0 0 49 3 2 #" ("
0 0 49 3 1 #"x"
0 0 49 3 3 #") ("
0 0 49 3 1 #"+"
0 0 49 3 1 #" "
0 0 49 3 1 #"x"
0 0 49 3 1 #" "
0 0 49 3 1 #"x"
0 0 49 3 5 #")}) ("
0 0 49 3 3 #"fdC"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 9 #"realtwice"
0 0 49 3 2 #" ("
0 0 49 3 4 #"list"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"x"
0 0 49 3 3 #") ("
0 0 49 3 5 #"binop"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"+"
0 0 49 3 2 #" ("
0 0 49 3 3 #"idC"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"x"
0 0 49 3 3 #") ("
0 0 49 3 3 #"idC"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"x"
0 0 49 3 4 #"))))"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 4 #"test"
0 0 49 3 2 #" ("
0 0 49 3 16 #"get-list-binding"
0 0 49 3 2 #" ("
0 0 49 3 4 #"list"
0 0 49 3 2 #" ("
0 0 49 3 4 #"numC"
0 0 49 3 1 #" "
0 0 49 3 1 #"1"
0 0 49 3 3 #") ("
0 0 49 3 4 #"numC"
0 0 49 3 1 #" "
0 0 49 3 1 #"2"
0 0 49 3 3 #") ("
0 0 49 3 4 #"numC"
0 0 49 3 1 #" "
0 0 49 3 1 #"3"
0 0 49 3 4 #")) ("
0 0 49 3 4 #"list"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"a"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"b"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"c"
0 0 49 3 2 #") "
0 0 49 3 5 #"empty"
0 0 49 3 1 #" "
0 0 49 3 5 #"empty"
0 0 49 3 2 #") "
0 0 49 3 5 #"empty"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 8 #"test/exn"
0 0 49 3 2 #" ("
0 0 49 3 16 #"get-list-binding"
0 0 49 3 2 #" ("
0 0 49 3 4 #"list"
0 0 49 3 2 #" ("
0 0 49 3 4 #"numC"
0 0 49 3 1 #" "
0 0 49 3 1 #"1"
0 0 49 3 3 #") ("
0 0 49 3 4 #"numC"
0 0 49 3 1 #" "
0 0 49 3 1 #"2"
0 0 49 3 5 #") ) ("
0 0 49 3 4 #"list"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"a"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"b"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"c"
0 0 49 3 2 #") "
0 0 49 3 5 #"empty"
0 0 49 3 1 #" "
0 0 49 3 5 #"empty"
0 0 49 3 2 #") "
0 0 49 3 12 #"\"Wrong Size\""
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 1 #")"
0           0
