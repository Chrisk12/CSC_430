(test/exn (parse-fundef '{f 0 1 5 2 4 8}) "Function is of the wrong type")
(test (parse-fundef '{fn minus (x y) (+ x (* -1 y))}) (fdC 'minus (list 'x 'y) (binop '+ (idC 'x) (binop '* (numC -1) (idC 'y)))))
(test (parse-fundef '{fn twice (x) (realtwice x)}) (fdC 'twice (list 'x) (appC 'realtwice (list (idC 'x)))))
(test (parse '{ifleq0 2 3 4}) (ifleq0 (numC 2) (numC 3) (numC 4)))
(test (parse-fundef '{fn p {x} {+ x 1}}) (fdC 'p (list 'x) (binop '+ (idC 'x) (numC 1))))
(test (parse-fundef '{fn realtwice (x) (+ x x)}) (fdC 'realtwice (list 'x) (binop '+ (idC 'x) (idC 'x))))

(test/exn (parse '{+ / 3}) "invalid input :(") 
(test/exn (parse '{+ 2 *}) "invalid input :(") 
(test/exn (parse '{+ - 3}) "invalid input :(") 
(test/exn (parse '{+ ifleq0 *}) "invalid input :(") 
(test/exn (parse '{+ + *}) "invalid input :(") 
(test/exn (parse-fundef '{fn + () 13}) "invalid input :(")
(test/exn (parse '{ifleq0}) "invalid input :(")
(test/exn (parse `ifleq0) "invalid input :(")
(test (parse '{ifleq0 2 3 4}) (ifleq0 (numC 2) (numC 3) (numC 4)))
(test (parse '{+ {f} {f}}) (binop '+ (appC 'f '()) (appC 'f '())))   
