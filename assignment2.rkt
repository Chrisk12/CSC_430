#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.1.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 31 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 66 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 18 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 92 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1 49
1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
50 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 18 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1           0 772 0 49 3 16 #"#lang plai-typed"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 7 #"require"
0 0 49 3 1 #" "
0 0 49 3 22 #"plai-typed/s-exp-match"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 17 #"print-only-errors"
0 0 49 3 6 #" true)"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 16 #"; Defines Experc"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 11 #"define-type"
0 0 49 3 6 #" ExprC"
0 0 49 29 1 #"\n"
0 0 49 3 11 #"  [numC (n "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 6 #"number"
0 0 49 3 2 #")]"
0 0 49 29 1 #"\n"
0 0 49 3 10 #"  [idC (s "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 6 #"symbol"
0 0 49 3 2 #")]"
0 0 49 29 1 #"\n"
0 0 49 3 13 #"  [appC (fun "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 6 #"symbol"
0 0 49 3 7 #") (arg "
0 0 49 3 1 #":"
0 0 49 3 2 #" ("
0 0 49 3 6 #"listof"
0 0 49 3 1 #" "
0 0 49 3 5 #"ExprC"
0 0 49 3 3 #"))]"
0 0 49 29 1 #"\n"
0 0 49 3 10 #"  [if0 (t "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 5 #"ExprC"
0 0 49 3 7 #") (iff "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 5 #"ExprC"
0 0 49 3 7 #") (ffi "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 5 #"ExprC"
0 0 49 3 2 #")]"
0 0 49 29 1 #"\n"
0 0 49 3 14 #"  [binop (sym "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 6 #"symbol"
0 0 49 3 5 #") (l "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 5 #"ExprC"
0 0 49 3 5 #") (r "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 5 #"ExprC"
0 0 49 3 3 #")])"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 36 #"; Defines the Interpreter / OUR EVAL"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 10 #" (interp ["
0 0 49 3 1 #"e"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 5 #"ExprC"
0 0 49 3 3 #"] ["
0 0 49 3 3 #"fds"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 2 #" ("
0 0 49 3 6 #"listof"
0 0 49 3 1 #" "
0 0 49 3 7 #"FunDefC"
0 0 49 3 4 #")]) "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 6 #"number"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 9 #"type-case"
0 0 49 3 1 #" "
0 0 49 3 5 #"ExprC"
0 0 49 3 1 #" "
0 0 50 3 1 #"e"
0 0 49 29 1 #"\n"
0 0 49 3 5 #"    ["
0 0 49 3 4 #"numC"
0 0 49 3 2 #" ("
0 0 49 3 1 #"n"
0 0 49 3 2 #") "
0 0 50 3 1 #"n"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 5 #"    ["
0 0 49 3 3 #"idC"
0 0 49 3 2 #" ("
0 0 49 3 1 #"_"
0 0 49 3 2 #") "
0 0 50 3 7 #"(error "
0 0 50 3 1 #"'"
0 0 50 3 6 #"interp"
0 0 50 3 22 #" \"shouldn't get here\")"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 5 #"    ["
0 0 49 3 4 #"appC"
0 0 49 3 2 #" ("
0 0 49 3 1 #"f"
0 0 49 3 1 #" "
0 0 49 3 1 #"a"
0 0 49 3 2 #") "
0 0 50 3 1 #"("
0 0 50 3 5 #"local"
0 0 50 3 3 #" (["
0 0 50 3 6 #"define"
0 0 50 3 1 #" "
0 0 50 3 2 #"fd"
0 0 50 3 21 #" (get-fundef f fds)])"
0 0 50 29 1 #"\n"
0 0 50 3 69
(
 #"                  (interp  (subst a (fdC-arg fd) (fdC-body fd)) fds)"
 #")"
) 0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 5 #"    ["
0 0 49 3 5 #"binop"
0 0 49 3 2 #" ("
0 0 49 3 1 #"s"
0 0 49 3 1 #" "
0 0 49 3 1 #"l"
0 0 49 3 1 #" "
0 0 49 3 1 #"r"
0 0 49 3 2 #") "
0 0 50 3 45 #"((get-binop s) (interp l fds) (interp r fds))"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 5 #"    ["
0 0 49 3 3 #"if0"
0 0 49 3 2 #" ("
0 0 49 3 1 #"t"
0 0 49 3 1 #" "
0 0 49 3 3 #"iff"
0 0 49 3 1 #" "
0 0 49 3 3 #"ffi"
0 0 49 3 2 #") "
0 0 50 3 1 #"("
0 0 50 3 4 #"cond"
0 0 50 3 41 #" [(<= (interp t fds) 0) (interp iff fds)]"
0 0 50 29 1 #"\n"
0 0 50 3 28 #"                           ["
0 0 50 3 4 #"else"
0 0 50 3 18 #" (interp ffi fds)]"
0 0 50 29 1 #"\n"
0 0 50 3 28 #"                           )"
0 0 49 3 3 #"]))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 48 #"; Checks to see if a symbol is a binary operator"
0 0 49 29 1 #"\n"
0 8         342 49 2 #"(\0"
2 #")\0"
67 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 1 #"d"
7 #"wxtext\0"
3 5 #"efine"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 14 #"check-if-binop"
7 #"wxtext\0"
3 2 #" ["
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"symbol"
7 #"wxtext\0"
3 3 #"]) "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 7 #"boolean"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 4 #"cond"
7 #"wxtext\0"
3 3 #" [("
7 #"wxtext\0"
3 3 #"eq?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 1 #"+"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 4 #"true"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"        [("
7 #"wxtext\0"
3 3 #"eq?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 1 #"*"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 4 #"true"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"        [("
7 #"wxtext\0"
3 3 #"eq?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 1 #"-"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 4 #"true"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"        [("
7 #"wxtext\0"
3 3 #"eq?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 1 #"/"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 4 #"true"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 9 #"        ["
7 #"wxtext\0"
3 4 #"else"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"false"
7 #"wxtext\0"
3 3 #"]))"
0 0 49 29 1 #"\n"
0 0 49 3 1 #" "
0 0 49 29 1 #"\n"
0 0 49 3 48 #"; Checks to see if a symbol is a binary operator"
0 0 49 29 1 #"\n"
0 8         357 49 2 #"(\0"
2 #")\0"
70 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 2 #"de"
7 #"wxtext\0"
3 1 #"f"
7 #"wxtext\0"
3 3 #"ine"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 9 #"get-binop"
7 #"wxtext\0"
3 2 #" ["
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"symbol"
7 #"wxtext\0"
3 3 #"]) "
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 4 #"cond"
7 #"wxtext\0"
3 3 #" [("
7 #"wxtext\0"
3 3 #"eq?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 1 #"+"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 1 #"+"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"        [("
7 #"wxtext\0"
3 3 #"eq?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 1 #"*"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 1 #"*"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"        [("
7 #"wxtext\0"
3 3 #"eq?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 1 #"-"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 1 #"-"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"        [("
7 #"wxtext\0"
3 3 #"eq?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 1 #"/"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 1 #"/"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 9 #"        ["
7 #"wxtext\0"
3 4 #"else"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"error"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 8 #"is-binop"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 13 #"\"NOT A BINOP\""
7 #"wxtext\0"
3 4 #")]))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 4 #"test"
0 0 49 3 17 #" (check-if-binop "
0 0 49 3 1 #"'"
0 0 49 3 1 #"+"
0 0 49 3 8 #") true) "
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 4 #"test"
0 0 49 3 17 #" (check-if-binop "
0 0 49 3 1 #"'"
0 0 49 3 1 #"f"
0 0 49 3 9 #") false) "
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 71
(
 #"; Searches through a list of symbols to see if a symbol is in the li"
 #"st."
) 0 0 49 29 1 #"\n"
0 8         297 49 2 #"(\0"
2 #")\0"
58 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 2 #"de"
7 #"wxtext\0"
3 1 #"f"
7 #"wxtext\0"
3 3 #"ine"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 13 #"check-in-list"
7 #"wxtext\0"
3 2 #" ["
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"symbol"
7 #"wxtext\0"
3 3 #"] ["
7 #"wxtext\0"
3 3 #"lst"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 6 #"listof"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"symbol"
7 #"wxtext\0"
3 4 #")]) "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 7 #"boolean"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 4 #"cond"
7 #"wxtext\0"
3 3 #" [("
7 #"wxtext\0"
3 6 #"empty?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"lst"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 5 #"false"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"        [("
7 #"wxtext\0"
3 8 #"symbol=?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"first"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"lst"
7 #"wxtext\0"
3 3 #")) "
7 #"wxtext\0"
3 4 #"true"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 9 #"        ["
7 #"wxtext\0"
3 4 #"else"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 13 #"check-in-list"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"rest"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"lst"
7 #"wxtext\0"
3 5 #"))]))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 8         107 49 2 #"(\0"
2 #")\0"
20 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 2 #"te"
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #"t"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 13 #"check-in-list"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 1 #"a"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"list"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 1 #"b"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 1 #"c"
7 #"wxtext\0"
3 3 #")) "
7 #"wxtext\0"
3 5 #"false"
7 #"wxtext\0"
3 1 #")"
0 0 49 29 1 #"\n"
0 8         102 49 2 #"(\0"
2 #")\0"
19 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 1 #"t"
7 #"wxtext\0"
3 3 #"est"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 13 #"check-in-list"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 1 #"a"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"list"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 1 #"b"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 1 #"a"
7 #"wxtext\0"
3 3 #")) "
7 #"wxtext\0"
3 4 #"true"
7 #"wxtext\0"
3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 66
#"; Defines the substition ALL THE FIRST PROBABLY NEED TO BE CHANGED"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 9 #" (subst ["
0 0 49 3 4 #"what"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 2 #" ("
0 0 49 3 6 #"listof"
0 0 49 3 1 #" "
0 0 49 3 5 #"ExprC"
0 0 49 3 4 #")] ["
0 0 49 3 3 #"for"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 2 #" ("
0 0 49 3 6 #"listof"
0 0 49 3 1 #" "
0 0 49 3 6 #"symbol"
0 0 49 3 4 #")] ["
0 0 49 3 2 #"in"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 2 #"  "
0 0 49 3 5 #"ExprC"
0 0 49 3 3 #"]) "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 5 #"ExprC"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 9 #"type-case"
0 0 49 3 1 #" "
0 0 49 3 5 #"ExprC"
0 0 49 3 1 #" "
0 0 50 3 2 #"in"
0 0 49 29 1 #"\n"
0 0 49 3 5 #"    ["
0 0 49 3 4 #"numC"
0 0 49 3 2 #" ("
0 0 49 3 1 #"n"
0 0 49 3 2 #") "
0 0 50 3 2 #"in"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 5 #"    ["
0 0 49 3 3 #"idC"
0 0 49 3 2 #" ("
0 0 49 3 1 #"s"
0 0 49 3 2 #") "
0 0 50 3 1 #"("
0 0 50 3 4 #"cond"
0 0 50 3 41 #" [(symbol=? s  (first for)) (first what)]"
0 0 50 29 1 #"\n"
0 0 50 3 20 #"                   ["
0 0 50 3 4 #"else"
0 0 50 3 5 #" in])"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 5 #"    ["
0 0 49 3 4 #"appC"
0 0 49 3 2 #" ("
0 0 49 3 1 #"f"
0 0 49 3 1 #" "
0 0 49 3 1 #"a"
0 0 49 3 2 #") "
0 0 50 3 1 #"("
0 0 50 3 4 #"appC"
0 0 50 3 37 #" f (list (subst what for (first a))))"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 5 #"    ["
0 0 49 3 3 #"if0"
0 0 49 3 2 #" ("
0 0 49 3 1 #"t"
0 0 49 3 1 #" "
0 0 49 3 3 #"iff"
0 0 49 3 1 #" "
0 0 49 3 3 #"fii"
0 0 49 3 2 #") "
0 0 50 3 1 #"("
0 0 50 3 3 #"if0"
0 0 50 3 62
#" (subst what for t) (subst what for iff) (subst what for fii))"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 5 #"    ["
0 0 49 3 5 #"binop"
0 0 49 3 2 #" ("
0 0 49 3 1 #"s"
0 0 49 3 1 #" "
0 0 49 3 3 #"iff"
0 0 49 3 1 #" "
0 0 49 3 3 #"fii"
0 0 49 3 2 #") "
0 0 50 3 1 #"("
0 0 50 3 5 #"binop"
0 0 50 3 45 #" s (subst what for iff) (subst what for fii))"
0 0 49 3 3 #"]))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 52 #";(test (subst (numC 3) (list 'x) (numC 3)) (numC 3))"
0 0 49 29 1 #"\n"
0 0 49 3 52 #";(test (subst (numC 3) (list 'x) (idC 'x)) (numC 3))"
0 0 49 29 1 #"\n"
0 0 49 3 52 #";(test (subst (numC 3) (list 'y) (idC 'x)) (idC 'x))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 32 #"; Get Funds ===EXPLAIN BETTER==="
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 14 #" (get-fundef ["
0 0 49 3 1 #"n"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 6 #"symbol"
0 0 49 3 3 #"] ["
0 0 49 3 3 #"fds"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 2 #" ("
0 0 49 3 6 #"listof"
0 0 49 3 1 #" "
0 0 49 3 7 #"FunDefC"
0 0 49 3 4 #")]) "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 7 #"FunDefC"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 50 3 1 #"("
0 0 50 3 4 #"cond"
0 0 50 29 1 #"\n"
0 0 50 3 25 #"    [(empty? fds) (error "
0 0 50 3 1 #"'"
0 0 50 3 10 #"get-fundef"
0 0 50 3 36 #" \"reference to undefined function\")]"
0 0 50 29 1 #"\n"
0 0 50 3 18 #"    [(cons? fds) ("
0 0 50 3 4 #"cond"
0 0 50 29 1 #"\n"
0 0 50 3 66
#"                   [(equal? n (fdC-name (first fds))) (first fds)]"
0 0 50 29 1 #"\n"
0 0 50 3 20 #"                   ["
0 0 50 3 4 #"else"
0 0 50 3 30 #" (get-fundef n (rest fds))])])"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 1 #" "
0 0 49 29 1 #"\n"
0 0 49 3 24 #"; 3.11 Defining a parser"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 9 #" (parse ["
0 0 49 3 1 #"s"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 12 #"s-expression"
0 0 49 3 3 #"]) "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 5 #"ExprC"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"cond"
0 0 49 29 1 #"\n"
0 0 49 3 24 #"    [(s-exp-number? s) ("
0 0 49 3 4 #"numC"
0 0 49 3 20 #" (s-exp->number s))]"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"    [("
0 0 49 3 3 #"and"
0 0 49 3 104
(
 #" (s-exp-symbol? (first (s-exp->list s))) (not (check-if-binop (s-exp"
 #"->symbol (first (s-exp->list s))))))"
) 0 0 49 29 1 #"\n"
0 0 49 3 25 #"        (create-appC  s)]"
0 0 49 29 1 #"\n"
0 0 49 3 19 #"    [(s-exp-match? "
0 0 49 3 1 #"'"
0 0 49 3 1 #"{"
0 0 49 3 6 #"SYMBOL"
0 0 49 3 1 #" "
0 0 49 3 3 #"ANY"
0 0 49 3 1 #" "
0 0 49 3 3 #"ANY"
0 0 49 3 4 #"} s)"
0 0 49 29 1 #"\n"
0 0 49 3 5 #"     "
0 0 50 3 1 #"("
0 0 50 3 5 #"binop"
0 0 50 3 106
(
 #" (s-exp->symbol (first (s-exp->list s))) (parse (second (s-exp->list"
 #" s))) (parse (third (s-exp->list s))))"
) 0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 19 #"    [(s-exp-match? "
0 0 49 3 1 #"'"
0 0 49 3 1 #"{"
0 0 49 3 3 #"if0"
0 0 49 3 1 #" "
0 0 49 3 3 #"ANY"
0 0 49 3 1 #" "
0 0 49 3 3 #"ANY"
0 0 49 3 1 #" "
0 0 49 3 3 #"ANY"
0 0 49 3 5 #"} s) "
0 0 50 3 1 #"("
0 0 50 3 3 #"if0"
0 0 50 29 1 #"\n"
0 0 50 3 74
(
 #"                                          (parse (second (s-exp->lis"
 #"t s)))"
) 0 0 50 29 1 #"\n"
0 0 50 3 73
(
 #"                                          (parse (third (s-exp->list"
 #" s)))"
) 0 0 50 29 1 #"\n"
0 0 50 3 75
(
 #"                                          (parse (fourth (s-exp->lis"
 #"t s))))"
) 0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 5 #"    ["
0 0 49 3 4 #"else"
0 0 49 3 8 #" (error "
0 0 49 3 1 #"'"
0 0 49 3 5 #"parse"
0 0 49 3 23 #" \"invalid input :(\")]))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 1 #";"
0 0 49 3 1 #"("
0 0 49 3 4 #"test"
0 0 49 3 3 #" (("
0 0 49 3 5 #"parse"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 33 #"{f 1})) (appC 'f (list numC(1))))"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 15 #" (create-appC ["
0 0 49 3 1 #"s"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 12 #"s-expression"
0 0 49 3 3 #"]) "
0 0 49 3 1 #":"
0 0 49 3 2 #"  "
0 0 49 3 5 #"ExprC"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"appC"
0 0 49 3 76
(
 #" (s-exp->symbol(first (s-exp->list s))) (map parse (rest (s-exp->lis"
 #"t s)))))"
) 0 0 49 29 1 #"\n"
0 0 49 3 1 #" "
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 14 #" (parse-eval ["
0 0 49 3 1 #"s"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 12 #"s-expression"
0 0 49 3 3 #"]) "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 6 #"number"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 50 3 24 #"(interp (parse s) empty)"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 42 #";(test (parse-eval '{if0 3 10 {+ 2 3}}) 5)"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"#;"
0 0 49 3 1 #"("
0 0 49 3 4 #"test"
0 0 49 3 2 #" ("
0 0 49 3 10 #"parse-eval"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"{"
0 0 49 3 1 #"+"
0 0 49 3 1 #" "
0 0 49 3 1 #"5"
0 0 49 3 1 #" "
0 0 49 3 1 #"5"
0 0 49 3 3 #"}) "
0 0 49 3 2 #"10"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 55 #"; Defines a datatype for functions to be represented as"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 11 #"define-type"
0 0 49 3 8 #" FunDefC"
0 0 49 29 1 #"\n"
0 0 49 3 13 #"  [fdC (name "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 6 #"symbol"
0 0 49 3 7 #") (arg "
0 0 49 3 1 #":"
0 0 49 3 2 #" ("
0 0 49 3 6 #"listof"
0 0 49 3 1 #" "
0 0 49 3 6 #"symbol"
0 0 49 3 9 #")) (body "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 5 #"ExprC"
0 0 49 3 3 #")])"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 15 #" (create-list ["
0 0 49 3 1 #"s"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 12 #"s-expression"
0 0 49 3 3 #"]) "
0 0 49 3 1 #":"
0 0 49 3 2 #" ("
0 0 49 3 6 #"listof"
0 0 49 3 1 #" "
0 0 49 3 6 #"symbol"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 50 3 57 #"(map s-exp->symbol (s-exp->list (third (s-exp->list s))))"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 16 #" (parse-fundef ["
0 0 49 3 1 #"s"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 12 #"s-expression"
0 0 49 3 3 #"]) "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 7 #"FunDefC"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 50 3 1 #"("
0 0 50 3 4 #"cond"
0 0 50 29 1 #"\n"
0 0 50 3 19 #"    [(s-exp-match? "
0 0 50 3 1 #"'"
0 0 50 3 1 #"{"
0 0 50 3 2 #"fn"
0 0 50 3 1 #" "
0 0 50 3 3 #"ANY"
0 0 50 3 1 #" "
0 0 50 3 3 #"ANY"
0 0 50 3 1 #" "
0 0 50 3 3 #"ANY"
0 0 50 3 4 #"} s)"
0 0 50 29 1 #"\n"
0 0 50 3 6 #"     ("
0 0 50 3 3 #"fdC"
0 0 50 3 92
(
 #" (s-exp->symbol (second (s-exp->list s))) (create-list s) (parse (fo"
 #"urth (s-exp->list s))))]"
) 0 0 50 29 1 #"\n"
0 0 50 3 5 #"    ["
0 0 50 3 4 #"else"
0 0 50 3 8 #" (error "
0 0 50 3 1 #"'"
0 0 50 3 5 #"parse"
0 0 50 3 17 #" \"wrong arity\")])"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 24 #";this needs to be tested"
0 0 49 29 1 #"\n"
0 8         107 49 2 #"(\0"
2 #")\0"
20 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 3 #"def"
7 #"wxtext\0"
3 1 #"i"
7 #"wxtext\0"
3 2 #"ne"
7 #"wxtext\0"
3 14 #" (check-list ["
7 #"wxtext\0"
3 1 #"l"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 6 #"listof"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"symbol"
7 #"wxtext\0"
3 4 #")]) "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 7 #"boolean"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 4 #"    "
7 #"wxtext\0"
3 32 #"(check-dupes (first l) (rest l))"
7 #"wxtext\0"
3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 8         337 49 2 #"(\0"
2 #")\0"
66 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 3 #"def"
7 #"wxtext\0"
3 1 #"i"
7 #"wxtext\0"
3 2 #"ne"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 11 #"check-dupes"
7 #"wxtext\0"
3 2 #" ["
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"symbol"
7 #"wxtext\0"
3 3 #"] ["
7 #"wxtext\0"
3 1 #"l"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 6 #"listof"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"symbol"
7 #"wxtext\0"
3 4 #")]) "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 7 #"boolean"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 5 #"    ("
7 #"wxtext\0"
3 4 #"cond"
7 #"wxtext\0"
3 3 #" [("
7 #"wxtext\0"
3 6 #"empty?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"l"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 4 #"true"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 11 #"          ["
7 #"wxtext\0"
3 4 #"else"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 3 #"and"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 3 #"and"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 3 #"not"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 3 #"eq?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"first"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"l"
7 #"wxtext\0"
3 5 #"))) ("
7 #"wxtext\0"
3 11 #"check-dupes"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"rest"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"l"
7 #"wxtext\0"
3 5 #"))) ("
7 #"wxtext\0"
3 10 #"check-list"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"rest"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"l"
7 #"wxtext\0"
3 6 #")))]))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"#;"
0 0 49 3 1 #"("
0 0 49 3 4 #"test"
0 0 49 3 2 #" ("
0 0 49 3 6 #"interp"
0 0 49 3 2 #" ("
0 0 49 3 5 #"parse"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"{"
0 0 49 3 1 #"f"
0 0 49 3 1 #" "
0 0 49 3 1 #"1"
0 0 49 3 2 #"})"
0 0 49 29 1 #"\n"
0 0 49 3 13 #"            ("
0 0 49 3 4 #"list"
0 0 49 3 2 #" ("
0 0 49 3 12 #"parse-fundef"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"{"
0 0 49 3 2 #"fn"
0 0 49 3 1 #" "
0 0 49 3 1 #"f"
0 0 49 3 2 #" {"
0 0 49 3 1 #"x"
0 0 49 3 3 #"} {"
0 0 49 3 1 #"+"
0 0 49 3 1 #" "
0 0 49 3 1 #"1"
0 0 49 3 1 #" "
0 0 49 3 1 #"1"
0 0 49 3 6 #"}}))) "
0 0 49 3 1 #"3"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"#;"
0 0 49 3 1 #"("
0 0 49 3 4 #"test"
0 0 49 3 2 #" ("
0 0 49 3 6 #"interp"
0 0 49 3 2 #" ("
0 0 49 3 5 #"parse"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"{"
0 0 49 3 1 #"+"
0 0 49 3 2 #" {"
0 0 49 3 1 #"f"
0 0 49 3 3 #"} {"
0 0 49 3 1 #"f"
0 0 49 3 3 #"}})"
0 0 49 29 1 #"\n"
0 0 49 3 13 #"            ("
0 0 49 3 4 #"list"
0 0 49 3 2 #" ("
0 0 49 3 12 #"parse-fundef"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"{"
0 0 49 3 2 #"fn"
0 0 49 3 1 #" "
0 0 49 3 1 #"f"
0 0 49 3 4 #" {} "
0 0 49 3 1 #"5"
0 0 49 3 5 #"}))) "
0 0 49 3 2 #"10"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"#;"
0 0 49 3 1 #"("
0 0 49 3 8 #"test/exn"
0 0 49 3 2 #" ("
0 0 49 3 6 #"interp"
0 0 49 3 2 #" ("
0 0 49 3 5 #"parse"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"{"
0 0 49 3 1 #"f"
0 0 49 3 1 #" "
0 0 49 3 1 #"1"
0 0 49 3 2 #"})"
0 0 49 29 1 #"\n"
0 0 49 3 17 #"                ("
0 0 49 3 4 #"list"
0 0 49 3 2 #" ("
0 0 49 3 12 #"parse-fundef"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"{"
0 0 49 3 2 #"fn"
0 0 49 3 1 #" "
0 0 49 3 1 #"f"
0 0 49 3 2 #" {"
0 0 49 3 1 #"x"
0 0 49 3 1 #" "
0 0 49 3 1 #"y"
0 0 49 3 3 #"} {"
0 0 49 3 1 #"+"
0 0 49 3 1 #" "
0 0 49 3 1 #"x"
0 0 49 3 1 #" "
0 0 49 3 1 #"y"
0 0 49 3 6 #"}}))) "
0 0 49 3 13 #"\"wrong arity\""
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 39 #";======================================"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"#;"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 2 #" ("
0 0 49 3 8 #"top-eval"
0 0 49 3 2 #" ["
0 0 49 3 1 #"s"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 12 #"s-expression"
0 0 49 3 3 #"] ["
0 0 49 3 9 #"fun-sexps"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 2 #" ("
0 0 49 3 6 #"listof"
0 0 49 3 1 #" "
0 0 49 3 12 #"s-expression"
0 0 49 3 4 #")]) "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 6 #"number"
0 0 49 29 1 #"\n"
0 0 49 3 5 #"    ("
0 0 49 3 4 #"eval"
0 0 49 3 2 #" ("
0 0 49 3 5 #"parse"
0 0 49 3 1 #" "
0 0 49 3 1 #"s"
0 0 49 3 3 #") ("
0 0 49 3 3 #"map"
0 0 49 3 1 #" "
0 0 49 3 12 #"parse-fundef"
0 0 49 3 1 #" "
0 0 49 3 9 #"fun-sexps"
0 0 49 3 3 #")))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 1 #";"
0 0 49 3 1 #"("
0 0 49 3 4 #"test"
0 0 49 3 2 #" ("
0 0 49 3 10 #"parse-eval"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"{"
0 0 49 3 22 #"+ {* 1 2} {+ 2 3}}) 7)"
0 0 49 29 1 #"\n"
0 0 49 3 50 #";(test (parse-eval '{+ 3 {+ {* 1 2} {+ 2 3}}}) 10)"
0 0 49 29 1 #"\n"
0 0 49 3 72
(
 #";(test/exn (parse-eval '{+ 3 {+ {* 1 \"d\"} {+ 2 3}}}) \"invalid inp"
 #"ut :(\")"
) 0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 43 #";(test (parse-eval '{+ {* 1 2} {+ 2 3}}) 7)"
0 0 49 29 1 #"\n"
0 0 49 3 70
(
 #";(test/exn (parse-eval '{% 3 {+ {* 1 2} {+ 2 3}}}) \"invalid input :"
 #"(\")"
) 0 0 49 29 1 #"\n"
0 0 49 3 64
#";(test/exn (parse-eval '{+ {% 1 2} {^ 2 3}}) \"invalid input :(\")"
0 0 49 29 1 #"\n"
0 0 49 3 60
#";(test/exn (parse-eval '{+ 3 3 3 3 3 3}) \"invalid input :(\")"
0 0 49 29 1 #"\n"
0 0 49 3 48 #";(test/exn (parse-eval '{+}) \"invalid input :(\")"
0 0 49 29 1 #"\n"
0           0
