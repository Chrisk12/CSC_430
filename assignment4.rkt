#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.1.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 31 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 76 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 18 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 92 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 0 1
#"\0"
0 75 12 #"Courier New\0"
0.0 18 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1 49 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 50 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1 17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 24 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 19 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 21 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 12 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 12 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 0 1 #"\0"
0 75 1 #"\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 10 #"Monospace\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1           0 7327 0 28 3 16 #"#lang plai-typed"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 22 #"plai-typed/s-exp-match"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 17 #"print-only-errors"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 15 #"; Defines Exprc"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 4 #"numC"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 3 #"idC"
0 0 24 3 2 #" ("
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 8 #"booleanC"
0 0 24 3 2 #" ("
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 7 #"boolean"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 4 #"appC"
0 0 24 3 2 #" ("
0 0 14 3 3 #"fun"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 24 3 3 #") ("
0 0 14 3 3 #"arg"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"t"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 24 3 3 #") ("
0 0 14 3 3 #"iff"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 24 3 3 #") ("
0 0 14 3 3 #"ffi"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 5 #"binop"
0 0 24 3 2 #" ("
0 0 14 3 3 #"sym"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 24 3 3 #") ("
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 24 3 3 #") ("
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 9 #"newArrayC"
0 0 24 3 2 #" ("
0 0 14 3 4 #"size"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 24 3 3 #") ["
0 0 14 3 5 #"value"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 24 3 2 #"]]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 4 #"lamC"
0 0 24 3 2 #" ("
0 0 14 3 3 #"arg"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 4 #"refC"
0 0 24 3 2 #" ("
0 0 14 3 3 #"sym"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 24 3 3 #") ("
0 0 14 3 8 #"location"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 9 #"setArrayC"
0 0 24 3 2 #" ("
0 0 14 3 3 #"sym"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 24 3 3 #") ("
0 0 14 3 8 #"location"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 24 3 3 #") ("
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 7 #"mutateC"
0 0 24 3 2 #" ("
0 0 14 3 3 #"sym"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 24 3 3 #") ("
0 0 14 3 5 #"value"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 15 3 6 #"beginC"
0 0 24 3 2 #" ("
0 0 14 3 5 #"elist"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"sym"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 16 #"; Defines Values"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 24 3 1 #" "
0 0 14 3 5 #"Value"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 4 #"numV"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 8 #"booleanV"
0 0 24 3 2 #" ("
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 7 #"boolean"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 5 #"closV"
0 0 24 3 2 #" ("
0 0 14 3 3 #"arg"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 24 3 3 #") ("
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Env"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 6 #"arrayV"
0 0 24 3 2 #" ("
0 0 14 3 8 #"location"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 8 #"Location"
0 0 24 3 3 #") ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 47 #"; Defines the Binding Type which takes a symbol"
0 0 24 29 1 #"\n"
0 0 17 3 21 #"; maps it to a number"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 24 3 1 #" "
0 0 14 3 7 #"Binding"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 4 #"bind"
0 0 24 3 2 #" ("
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 24 3 3 #") ("
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 8 #"Location"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #"; An Alias for a list of bindings"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 17 #"define-type-alias"
0 0 24 3 1 #" "
0 0 14 3 3 #"Env"
0 0 24 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 24 3 1 #" "
0 0 14 3 7 #"Binding"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"mt-env"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"extend-env"
0 0 24 3 1 #" "
0 0 14 3 4 #"cons"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 25 #"; An Alias for a Location"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 17 #"define-type-alias"
0 0 24 3 1 #" "
0 0 14 3 8 #"Location"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 40 #"; A Type that maps a location to a value"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 24 3 1 #" "
0 0 14 3 7 #"Storage"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 4 #"cell"
0 0 24 3 2 #" ("
0 0 14 3 8 #"location"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 8 #"Location"
0 0 24 3 3 #") ("
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"Value"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #"; An Alias for a list of storage"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 17 #"define-type-alias"
0 0 24 3 1 #" "
0 0 14 3 5 #"Store"
0 0 24 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 24 3 1 #" "
0 0 14 3 7 #"Storage"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"mt-store"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"override-store"
0 0 24 3 1 #" "
0 0 14 3 4 #"cons"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #"; A type that has a value and a store"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 24 3 1 #" "
0 0 14 3 6 #"Result"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"Value"
0 0 24 3 3 #") ("
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"Store"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 44 #"; A type that has a baselocation and a store"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 24 3 1 #" "
0 0 14 3 3 #"N*S"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 3 #"n*s"
0 0 24 3 2 #" ("
0 0 14 3 4 #"base"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 3 #") ("
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"Store"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 44 #"; A type that has a baselocation and a store"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 24 3 1 #" "
0 0 14 3 5 #"ENV*S"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 5 #"env*s"
0 0 24 3 2 #" ("
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Env"
0 0 24 3 3 #") ("
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"Store"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 46 #"; A type that has a list of values and a store"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 24 3 1 #" "
0 0 14 3 4 #"LV*S"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 4 #"lv*s"
0 0 24 3 2 #" ("
0 0 14 3 6 #"values"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 24 3 1 #" "
0 0 14 3 5 #"Value"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"Store"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 68
#"; Defines the Interpreter. Takes in an ExprC and a list of functions"
0 0 24 29 1 #"\n"
0 0 17 3 64
#"; and then evalutes the ExperC recursively and returns a number."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ["
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 24 3 3 #"] ["
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Env"
0 0 24 3 3 #"] ["
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"Store"
0 0 24 3 3 #"]) "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 6 #"Result"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"numC"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #") "
0 0 14 3 5 #"store"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 3 #"idC"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 5 #"fetch"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #") "
0 0 14 3 5 #"store"
0 0 24 3 2 #") "
0 0 14 3 5 #"store"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 8 #"booleanC"
0 0 24 3 2 #" ("
0 0 14 3 1 #"b"
0 0 24 3 3 #") ("
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 8 #"booleanV"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #") "
0 0 14 3 5 #"store"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"refC"
0 0 24 3 2 #" ("
0 0 14 3 3 #"sym"
0 0 24 3 1 #" "
0 0 14 3 3 #"loc"
0 0 24 3 3 #") ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 6 #"update"
0 0 24 3 2 #" ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 6 #"Result"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 1 #" "
0 0 14 3 3 #"loc"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ["
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 5 #"v-loc"
0 0 24 3 1 #" "
0 0 14 3 5 #"s-loc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 14 3 3 #"v*s"
0 0 24 3 1 #" "
0 0 14 3 5 #"v-loc"
0 0 24 3 1 #" "
0 0 14 3 5 #"s-loc"
0 0 24 3 5 #")])])"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 10 #"arrayValue"
0 0 24 3 2 #" ("
0 0 14 3 5 #"fetch"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #") ("
0 0 14 3 5 #"v*s-s"
0 0 24 3 1 #" "
0 0 14 3 6 #"update"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"arrayV?"
0 0 24 3 1 #" "
0 0 14 3 10 #"arrayValue"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 13 #"arrayV-length"
0 0 24 3 1 #" "
0 0 14 3 10 #"arrayValue"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 14 3 6 #"numV-n"
0 0 24 3 2 #" ("
0 0 14 3 5 #"v*s-v"
0 0 24 3 1 #" "
0 0 14 3 6 #"update"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 5 #"fetch"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 15 #"arrayV-location"
0 0 24 3 1 #" "
0 0 14 3 10 #"arrayValue"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 47 #"                                              ("
0 0 14 3 6 #"numV-n"
0 0 24 3 2 #" ("
0 0 14 3 5 #"v*s-v"
0 0 24 3 1 #" "
0 0 14 3 6 #"update"
0 0 24 3 4 #"))) "
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                           "
0 0 14 3 5 #"store"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 5 #"v*s-s"
0 0 24 3 1 #" "
0 0 14 3 6 #"update"
0 0 24 3 5 #"))]  "
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"refC"
0 0 24 3 1 #" "
0 0 19 3 33 #"\"Not an array or not long enough\""
0 0 24 3 6 #")])))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 9 #"setArrayC"
0 0 24 3 2 #" ("
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 3 #"loc"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 6 #"Result"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 1 #" "
0 0 14 3 3 #"loc"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ["
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 5 #"v-loc"
0 0 24 3 1 #" "
0 0 14 3 5 #"s-loc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 6 #"Result"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 5 #"s-loc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ["
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 5 #"v-exp"
0 0 24 3 1 #" "
0 0 14 3 5 #"s-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 10 #"arrayValue"
0 0 24 3 2 #" ("
0 0 14 3 5 #"fetch"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #") "
0 0 14 3 5 #"s-loc"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                           ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"arrayV?"
0 0 24 3 1 #" "
0 0 14 3 10 #"arrayValue"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 56 #"                                                       ("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 13 #"arrayV-length"
0 0 24 3 1 #" "
0 0 14 3 10 #"arrayValue"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 59
#"                                                          ("
0 0 14 3 6 #"numV-n"
0 0 24 3 1 #" "
0 0 14 3 5 #"v-loc"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 51 #"                                                  ("
0 0 14 3 3 #"v*s"
0 0 24 3 1 #" "
0 0 14 3 5 #"v-exp"
0 0 24 3 2 #" ("
0 0 14 3 12 #"update-store"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 63
#"                                                              ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 15 #"arrayV-location"
0 0 24 3 1 #" "
0 0 14 3 10 #"arrayValue"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 66
#"                                                                 ("
0 0 14 3 6 #"numV-n"
0 0 24 3 1 #" "
0 0 14 3 5 #"v-loc"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 62
#"                                                              "
0 0 14 3 5 #"v-exp"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 62
#"                                                              "
0 0 14 3 5 #"s-exp"
0 0 24 3 4 #"))] "
0 0 24 29 1 #"\n"
0 0 24 3 50 #"                                                 ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"refC"
0 0 24 3 1 #" "
0 0 19 3 33 #"\"Not an array or not long enough\""
0 0 24 3 9 #")]))])])]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 7 #"mutateC"
0 0 24 3 2 #" ("
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 3 #") ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 6 #"update"
0 0 24 3 2 #" ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 6 #"Result"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ["
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 6 #"v-expr"
0 0 24 3 1 #" "
0 0 14 3 6 #"s-expr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                           ("
0 0 14 3 3 #"v*s"
0 0 24 3 1 #" "
0 0 14 3 6 #"v-expr"
0 0 24 3 1 #" "
0 0 14 3 6 #"s-expr"
0 0 24 3 5 #")])])"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 5 #"v*s-v"
0 0 24 3 1 #" "
0 0 14 3 6 #"update"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 12 #"update-store"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                           ("
0 0 14 3 5 #"v*s-v"
0 0 24 3 1 #" "
0 0 14 3 6 #"update"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                           ("
0 0 14 3 5 #"v*s-s"
0 0 24 3 1 #" "
0 0 14 3 6 #"update"
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 9 #"newArrayC"
0 0 24 3 2 #" ("
0 0 14 3 4 #"size"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 6 #"Result"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 1 #" "
0 0 14 3 4 #"size"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ["
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 6 #"v-size"
0 0 24 3 1 #" "
0 0 14 3 6 #"s-size"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 6 #"Result"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 6 #"s-size"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ["
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 7 #"v-value"
0 0 24 3 1 #" "
0 0 14 3 7 #"s-value"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" [("
0 0 14 3 3 #"all"
0 0 24 3 2 #" ("
0 0 14 3 8 #"allocate"
0 0 24 3 1 #" "
0 0 14 3 7 #"s-value"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 61
#"                                                            ("
0 0 14 3 6 #"numV-n"
0 0 24 3 1 #" "
0 0 14 3 6 #"v-size"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 60
#"                                                            "
0 0 14 3 7 #"v-value"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                          ("
0 0 14 3 3 #"v*s"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"arrayV"
0 0 24 3 2 #" ("
0 0 14 3 8 #"n*s-base"
0 0 24 3 1 #" "
0 0 14 3 3 #"all"
0 0 24 3 3 #") ("
0 0 14 3 6 #"numV-n"
0 0 24 3 1 #" "
0 0 14 3 6 #"v-size"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 49 #"                                                ("
0 0 14 3 9 #"n*s-store"
0 0 24 3 1 #" "
0 0 14 3 3 #"all"
0 0 24 3 8 #")))])])]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 15 3 6 #"beginC"
0 0 24 3 2 #" ("
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 11 #"extendStore"
0 0 24 3 2 #" ("
0 0 14 3 13 #"evaluate-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 6 #"Result"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 11 #"extendStore"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ["
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 5 #"v-sym"
0 0 24 3 1 #" "
0 0 14 3 5 #"s-sym"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 3 #"v*s"
0 0 24 3 1 #" "
0 0 14 3 5 #"v-sym"
0 0 24 3 1 #" "
0 0 14 3 5 #"s-sym"
0 0 24 3 5 #")]))]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 8         112 4 2 #"[\0"
2 #"]\0"
21 7 #"wxtext\0"
3 1 #"["
7 #"wxtext\0"
3 2 #"la"
7 #"wxtext\0"
3 1 #"m"
7 #"wxtext\0"
3 1 #"C"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"param"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 4 #"body"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 3 #"v*s"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"closV"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"param"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 4 #"body"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"env"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 5 #"store"
7 #"wxtext\0"
3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 8         342 4 2 #"[\0"
2 #"]\0"
67 7 #"wxtext\0"
3 1 #"["
7 #"wxtext\0"
3 1 #"b"
7 #"wxtext\0"
3 1 #"i"
7 #"wxtext\0"
3 3 #"nop"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"l"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"r"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 9 #"type-case"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"Result"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"eval"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"l"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"env"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"store"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 23 #"                      ["
7 #"wxtext\0"
3 3 #"v*s"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 3 #"v-l"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"s-l"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 28 #"                           ("
7 #"wxtext\0"
3 9 #"type-case"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"Result"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"eval"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"r"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"env"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"s-l"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 30 #"                             ["
7 #"wxtext\0"
3 3 #"v*s"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 3 #"v-r"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"s-r"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 35 #"                                  ("
7 #"wxtext\0"
3 3 #"v*s"
7 #"wxtext\0"
3 3 #" (("
7 #"wxtext\0"
3 9 #"get-binop"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 3 #"v-l"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"v-r"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 3 #"s-r"
7 #"wxtext\0"
3 6 #")])])]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 8         607 4 2 #"[\0"
2 #"]\0"
120 7 #"wxtext\0"
3 1 #"["
7 #"wxtext\0"
3 1 #"i"
7 #"wxtext\0"
3 1 #"f"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 1 #"t"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"iff"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"ffi"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 9 #"type-case"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"Result"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"eval"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"t"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"env"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"store"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 23 #"                      ["
7 #"wxtext\0"
3 3 #"v*s"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 3 #"v-t"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"s-t"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 28 #"                           ("
7 #"wxtext\0"
3 4 #"cond"
7 #"wxtext\0"
3 3 #" [("
7 #"wxtext\0"
3 3 #"not"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 9 #"booleanV?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"v-t"
7 #"wxtext\0"
3 3 #")) "
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 35 #"                                  ("
7 #"wxtext\0"
3 5 #"error"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 2 #"if"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"\""
7 #"wxtext\0"
3 3 #"not"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"a"
7 #"wxtext\0"
3 8 #" boolean"
7 #"wxtext\0"
3 1 #"\""
7 #"wxtext\0"
3 2 #")]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 35 #"                                 [("
7 #"wxtext\0"
3 10 #"booleanV-b"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"v-t"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 9 #"type-case"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"Result"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"eval"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"iff"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"env"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"s-t"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 54 #"                                                     ["
7 #"wxtext\0"
3 3 #"v*s"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"v-iff"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"s-iff"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 59 #"                                                          ("
7 #"wxtext\0"
3 3 #"v*s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"v-iff"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"s-iff"
7 #"wxtext\0"
3 4 #")])]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 34 #"                                 ["
7 #"wxtext\0"
3 4 #"else"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 9 #"type-case"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"Result"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"eval"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"ffi"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"env"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"s-t"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 42 #"                                         ["
7 #"wxtext\0"
3 3 #"v*s"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"v-ffi"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"s-ffi"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 47 #"                                              ("
7 #"wxtext\0"
3 3 #"v*s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"v-ffi"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"s-ffi"
7 #"wxtext\0"
3 8 #")])])])]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 8         477 4 2 #"[\0"
2 #"]\0"
94 7 #"wxtext\0"
3 1 #"["
7 #"wxtext\0"
3 2 #"ap"
7 #"wxtext\0"
3 1 #"p"
7 #"wxtext\0"
3 1 #"C"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 1 #"f"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"a"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 11 #"          ("
7 #"wxtext\0"
3 9 #"type-case"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"Result"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"eval"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"f"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"env"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"store"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 13 #"            ["
7 #"wxtext\0"
3 3 #"v*s"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 3 #"v-f"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"s-f"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 18 #"                 ("
7 #"wxtext\0"
3 3 #"let"
7 #"wxtext\0"
3 3 #" (["
7 #"wxtext\0"
3 3 #"lvs"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 15 #"get-values-eval"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"a"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"env"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"s-f"
7 #"wxtext\0"
3 3 #")])"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 20 #"                   ("
7 #"wxtext\0"
3 3 #"let"
7 #"wxtext\0"
3 3 #" (["
7 #"wxtext\0"
3 6 #"update"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 25 #"update-store-bind-symbols"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 9 #"closV-arg"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"v-f"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 61 #"                                                            ("
7 #"wxtext\0"
3 11 #"lv*s-values"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"lvs"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 60 #"                                                            "
7 #"wxtext\0"
3 3 #"env"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 61 #"                                                            ("
7 #"wxtext\0"
3 10 #"lv*s-store"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"lvs"
7 #"wxtext\0"
3 4 #"))])"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 22 #"                     ("
7 #"wxtext\0"
3 4 #"eval"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 10 #"closV-body"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"v-f"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 11 #"append-list"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 9 #"env*s-env"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"update"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 9 #"closV-env"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"v-f"
7 #"wxtext\0"
3 4 #")) ("
7 #"wxtext\0"
3 11 #"env*s-store"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"update"
7 #"wxtext\0"
3 7 #"))))])]"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 29 #"; Evalues a list of experC   "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 2 #"de"
0 0 15 3 4 #"fine"
0 0 24 3 2 #" ("
0 0 14 3 13 #"evaluate-list"
0 0 24 3 2 #" ["
0 0 14 3 5 #"elist"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 24 3 4 #")] ["
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Env"
0 0 24 3 3 #"] ["
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"Store"
0 0 24 3 3 #"]) "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"Store"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 5 #"elist"
0 0 24 3 2 #") "
0 0 14 3 5 #"store"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 15 3 9 #"type-case"
0 0 24 3 1 #" "
0 0 14 3 6 #"Result"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"elist"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ["
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 7 #"v-value"
0 0 24 3 1 #" "
0 0 14 3 7 #"s-store"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 13 #"evaluate-list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"elist"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 7 #"s-store"
0 0 24 3 6 #")])]))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 57 #"; Updates the store env and binds the symbosl to the env."
0 0 24 29 1 #"\n"
0 0 17 3 25 #"; The work horse function"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 25 #"update-store-bind-symbols"
0 0 24 3 2 #" ["
0 0 14 3 4 #"args"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 24 3 3 #")] "
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ["
0 0 14 3 6 #"values"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 24 3 1 #" "
0 0 14 3 5 #"Value"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ["
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 3 #"Env"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ["
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"Store"
0 0 24 3 3 #"]) "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ENV*S"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (["
0 0 14 3 12 #"nextLocation"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 2 #" ("
0 0 14 3 17 #"get-last-location"
0 0 24 3 2 #" ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 49 #"                                                ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 5 #")))] "
0 0 24 29 1 #"\n"
0 0 24 3 48 #"                                               ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 6 #"])))])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 5 #"env*s"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 15 3 3 #"let"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                    (["
0 0 14 3 11 #"extendStore"
0 0 24 3 2 #" ("
0 0 14 3 8 #"allocate"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 6 #"values"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ["
0 0 14 3 9 #"extendEnv"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"bind"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 2 #") "
0 0 14 3 12 #"nextLocation"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 6 #"update"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 25 #"update-store-bind-symbols"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 53 #"                                                    ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 6 #"values"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 52 #"                                                    "
0 0 14 3 9 #"extendEnv"
0 0 24 29 1 #"\n"
0 0 24 3 53 #"                                                    ("
0 0 14 3 9 #"n*s-store"
0 0 24 3 1 #" "
0 0 14 3 11 #"extendStore"
0 0 24 3 5 #"))]) "
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 5 #"env*s"
0 0 24 3 2 #" ("
0 0 14 3 9 #"env*s-env"
0 0 24 3 1 #" "
0 0 14 3 6 #"update"
0 0 24 3 3 #") ("
0 0 14 3 11 #"env*s-store"
0 0 24 3 1 #" "
0 0 14 3 6 #"update"
0 0 24 3 8 #"))))])))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #"; 3.11 Defining a parser that takes an s expression and convert it t"
 #"o an ExperC."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ["
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 12 #"s-expression"
0 0 24 3 3 #"]) "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 13 #"s-exp-number?"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 4 #"numC"
0 0 24 3 2 #" ("
0 0 14 3 13 #"s-exp->number"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 12 #"s-exp-match?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"true"
0 0 24 3 2 #"} "
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 8 #"booleanC"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 12 #"s-exp-match?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 5 #"false"
0 0 24 3 2 #"} "
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 8 #"booleanC"
0 0 24 3 1 #" "
0 0 14 3 5 #"false"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 13 #"s-exp-symbol?"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 16 #"check-if-boolean"
0 0 24 3 2 #" ("
0 0 14 3 13 #"s-exp->symbol"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 4 #")) ("
0 0 14 3 17 #"get-boolean-value"
0 0 24 3 2 #" ("
0 0 14 3 13 #"s-exp->symbol"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 24 #"check-if-reserved-symbol"
0 0 24 3 2 #" ("
0 0 14 3 13 #"s-exp->symbol"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 19 3 18 #"\"invalid input :(\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 3 #"idC"
0 0 24 3 2 #" ("
0 0 14 3 13 #"s-exp->symbol"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 5 #"))])]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 12 #"s-exp-match?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 9 #"new-array"
0 0 24 3 1 #" "
0 0 14 3 3 #"ANY"
0 0 24 3 1 #" "
0 0 14 3 3 #"ANY"
0 0 24 3 2 #"} "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 9 #"newArrayC"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 2 #" ("
0 0 14 3 11 #"s-exp->list"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 2 #" ("
0 0 14 3 11 #"s-exp->list"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 12 #"s-exp-match?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 3 #"ref"
0 0 24 3 1 #" "
0 0 14 3 6 #"SYMBOL"
0 0 24 3 2 #" ["
0 0 14 3 3 #"ANY"
0 0 24 3 3 #"]} "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 4 #"refC"
0 0 24 3 2 #" ("
0 0 14 3 13 #"s-exp->symbol"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 2 #" ("
0 0 14 3 11 #"s-exp->list"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 4 #"))) "
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 11 #"s-exp->list"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 2 #" ("
0 0 14 3 11 #"s-exp->list"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 7 #"))))))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 12 #"s-exp-match?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 3 #"ANY"
0 0 24 3 2 #" ["
0 0 14 3 3 #"ANY"
0 0 24 3 2 #"] "
0 0 14 3 2 #"<-"
0 0 24 3 1 #" "
0 0 14 3 3 #"ANY"
0 0 24 3 2 #"} "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 9 #"setArrayC"
0 0 24 3 2 #" ("
0 0 14 3 13 #"s-exp->symbol"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 11 #"s-exp->list"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 11 #"s-exp->list"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 2 #" ("
0 0 14 3 11 #"s-exp->list"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 6 #"fourth"
0 0 24 3 2 #" ("
0 0 14 3 11 #"s-exp->list"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 12 #"s-exp-match?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 6 #"SYMBOL"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 1 #" "
0 0 14 3 3 #"ANY"
0 0 24 3 2 #"} "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 7 #"mutateC"
0 0 24 3 2 #" ("
0 0 14 3 13 #"s-exp->symbol"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 11 #"s-exp->list"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 2 #" ("
0 0 14 3 11 #"s-exp->list"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 12 #"s-exp-match?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 15 3 5 #"begin"
0 0 24 3 1 #" "
0 0 14 3 3 #"ANY"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 1 #" "
0 0 14 3 6 #"SYMBOL"
0 0 24 3 2 #"} "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"beginC"
0 0 24 3 2 #" ("
0 0 14 3 16 #"get-list-of-expr"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 2 #" ("
0 0 14 3 11 #"s-exp->list"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 5 #"))) ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 7 #"reverse"
0 0 24 3 2 #" ("
0 0 14 3 11 #"s-exp->list"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 6 #")))))]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     [("
0 0 14 3 12 #"s-exp-match?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 6 #"SYMBOL"
0 0 24 3 1 #" "
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 3 #"ANY"
0 0 24 3 1 #"}"
0 0 14 3 3 #"..."
0 0 24 3 1 #" "
0 0 14 3 3 #"ANY"
0 0 24 3 2 #"} "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 4 #"args"
0 0 24 3 2 #" ("
0 0 14 3 11 #"list->s-exp"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 2 #" ("
0 0 14 3 11 #"s-exp->list"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ["
0 0 14 3 6 #"params"
0 0 24 3 2 #" ("
0 0 14 3 10 #"get-params"
0 0 24 3 2 #" ("
0 0 14 3 11 #"list->s-exp"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 2 #" ("
0 0 14 3 11 #"s-exp->list"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 4 #"))) "
0 0 14 3 5 #"empty"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ["
0 0 14 3 5 #"truth"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 18 #"not-valid-symbols?"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 10 #"get-params"
0 0 24 3 2 #" ("
0 0 14 3 11 #"list->s-exp"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #"("
0 0 14 3 11 #"s-exp->list"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 4 #"))) "
0 0 14 3 5 #"empty"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 16 #"list-has-no-dups"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 10 #"get-params"
0 0 24 3 2 #" ("
0 0 14 3 11 #"list->s-exp"
0 0 24 3 10 #"          "
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #"("
0 0 14 3 11 #"s-exp->list"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 4 #"))) "
0 0 14 3 5 #"empty"
0 0 24 3 6 #"))))])"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 4 #"cond"
0 0 24 3 2 #" ["
0 0 14 3 5 #"truth"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"with"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"dups\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"appC"
0 0 24 3 2 #" ("
0 0 14 3 4 #"lamC"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 14 3 6 #"params"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 10 #"get-values"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 14 #"get-list-exprC"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 6 #"))]))]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 12 #"s-exp-match?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 3 #"ANY"
0 0 24 3 1 #" "
0 0 14 3 3 #"ANY"
0 0 24 3 1 #" "
0 0 14 3 3 #"ANY"
0 0 24 3 2 #"} "
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 2 #" ("
0 0 14 3 11 #"s-exp->list"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 2 #" ("
0 0 14 3 11 #"s-exp->list"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 6 #"fourth"
0 0 24 3 2 #" ("
0 0 14 3 11 #"s-exp->list"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 12 #"s-exp-match?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 2 #"fn"
0 0 24 3 2 #" {"
0 0 14 3 6 #"SYMBOL"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 2 #"} "
0 0 14 3 3 #"ANY"
0 0 24 3 2 #"} "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 5 #"truth"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 18 #"not-valid-symbols?"
0 0 24 3 2 #" ("
0 0 14 3 11 #"create-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 16 #"list-has-no-dups"
0 0 24 3 2 #" ("
0 0 14 3 11 #"create-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 6 #"))))])"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 4 #"cond"
0 0 24 3 2 #" ["
0 0 14 3 5 #"truth"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"fn"
0 0 24 3 1 #" "
0 0 19 3 19 #"\"duplicate symbols\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"lamC"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 11 #"create-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 2 #" ("
0 0 14 3 11 #"s-exp->list"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 8 #"))))]))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 12 #"s-exp-match?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 3 #"ANY"
0 0 24 3 1 #" "
0 0 14 3 3 #"ANY"
0 0 24 3 2 #"} "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 3 #"  ("
0 0 14 3 13 #"s-exp-symbol?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 2 #" ("
0 0 14 3 11 #"s-exp->list"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 45 #"check-if-reserved-symbol-excluding-true-false"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 13 #"s-exp->symbol"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 2 #" ("
0 0 14 3 11 #"s-exp->list"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 13 #"s-exp-symbol?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 2 #" ("
0 0 14 3 11 #"s-exp->list"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 45 #"check-if-reserved-symbol-excluding-true-false"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 13 #"s-exp->symbol"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 2 #" ("
0 0 14 3 11 #"s-exp->list"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 19 3 15 #"\"bad symbol yo\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 5 #"binop"
0 0 24 3 2 #" ("
0 0 14 3 13 #"s-exp->symbol"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 11 #"s-exp->list"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 2 #" ("
0 0 14 3 11 #"s-exp->list"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 2 #" ("
0 0 14 3 11 #"s-exp->list"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 7 #"))))])]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 12 #"s-exp-match?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 6 #"SYMBOL"
0 0 24 3 1 #" "
0 0 14 3 3 #"ANY"
0 0 24 3 1 #" "
0 0 14 3 3 #"ANY"
0 0 24 3 2 #"} "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 17 #"test-of-operators"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 6 #"second"
0 0 24 3 3 #") ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 19 3 18 #"\"invalid input :(\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"           [("
0 0 14 3 17 #"test-of-operators"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 5 #"third"
0 0 24 3 3 #") ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 19 3 18 #"\"invalid input :(\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"           [("
0 0 14 3 14 #"check-if-binop"
0 0 24 3 1 #"("
0 0 14 3 13 #"s-exp->symbol"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 11 #"s-exp->list"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 6 #"))))  "
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 5 #"binop"
0 0 24 3 2 #" ("
0 0 14 3 13 #"s-exp->symbol"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 11 #"s-exp->list"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 2 #" ("
0 0 14 3 11 #"s-exp->list"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 5 #"parse"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 2 #" ("
0 0 14 3 11 #"s-exp->list"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 11 #"create-appC"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 4 #")])]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 12 #"s-exp-match?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 3 #"ANY"
0 0 24 3 1 #" "
0 0 14 3 3 #"ANY"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 2 #"} "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 11 #"create-appC"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 28 #"; Gets a list of parse exprC"
0 0 24 29 1 #"\n"
0 8         302 4 2 #"(\0"
2 #")\0"
59 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 2 #"de"
7 #"wxtext\0"
3 1 #"f"
7 #"wxtext\0"
3 3 #"ine"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 16 #"get-list-of-expr"
7 #"wxtext\0"
3 2 #" ["
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 6 #"listof"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 12 #"s-expression"
7 #"wxtext\0"
3 4 #")]) "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 6 #"listof"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"ExprC"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 5 #"    ("
7 #"wxtext\0"
3 4 #"cond"
7 #"wxtext\0"
3 3 #" [("
7 #"wxtext\0"
3 2 #"or"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 6 #"empty?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 1 #"="
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"1"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 6 #"length"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 4 #"))) "
7 #"wxtext\0"
3 5 #"empty"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 11 #"          ["
7 #"wxtext\0"
3 4 #"else"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"cons"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"parse"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"first"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 4 #")) ("
7 #"wxtext\0"
3 16 #"get-list-of-expr"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"rest"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 60
#"; Preforms the look up for the symbol in the envirnment and "
0 0 24 29 1 #"\n"
0 0 17 3 22 #"; returns the location"
0 0 24 29 1 #"\n"
0 8         407 4 2 #"(\0"
2 #")\0"
80 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 3 #"def"
7 #"wxtext\0"
3 1 #"i"
7 #"wxtext\0"
3 2 #"ne"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 6 #"lookup"
7 #"wxtext\0"
3 2 #" ["
7 #"wxtext\0"
3 3 #"for"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"symbol"
7 #"wxtext\0"
3 3 #"] ["
7 #"wxtext\0"
3 3 #"env"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"Env"
7 #"wxtext\0"
3 3 #"]) "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 8 #"Location"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 4 #"cond"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"    [("
7 #"wxtext\0"
3 6 #"empty?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"env"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 5 #"error"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 6 #"lookup"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"\""
7 #"wxtext\0"
3 4 #"name"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"not"
7 #"wxtext\0"
3 6 #" found"
7 #"wxtext\0"
3 1 #"\""
7 #"wxtext\0"
3 2 #")]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 5 #"    ["
7 #"wxtext\0"
3 4 #"else"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"cond"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 14 #"            [("
7 #"wxtext\0"
3 8 #"symbol=?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"for"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 9 #"bind-name"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"first"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"env"
7 #"wxtext\0"
3 3 #")))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 14 #"             ("
7 #"wxtext\0"
3 8 #"bind-val"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"first"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"env"
7 #"wxtext\0"
3 3 #"))]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 13 #"            ["
7 #"wxtext\0"
3 4 #"else"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 6 #"lookup"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"for"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"rest"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"env"
7 #"wxtext\0"
3 7 #"))])]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 50 #"; Fetches the value from the location in the store"
0 0 24 29 1 #"\n"
0 8         407 4 2 #"(\0"
2 #")\0"
80 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 3 #"def"
7 #"wxtext\0"
3 1 #"i"
7 #"wxtext\0"
3 2 #"ne"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"fetch"
7 #"wxtext\0"
3 2 #" ["
7 #"wxtext\0"
3 3 #"loc"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 8 #"Location"
7 #"wxtext\0"
3 3 #"] ["
7 #"wxtext\0"
3 3 #"sto"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"Store"
7 #"wxtext\0"
3 3 #"]) "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"Value"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 4 #"cond"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"    [("
7 #"wxtext\0"
3 6 #"empty?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"sto"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 5 #"error"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 6 #"lookup"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"\""
7 #"wxtext\0"
3 4 #"name"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"not"
7 #"wxtext\0"
3 6 #" found"
7 #"wxtext\0"
3 1 #"\""
7 #"wxtext\0"
3 2 #")]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 5 #"    ["
7 #"wxtext\0"
3 4 #"else"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"cond"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 14 #"            [("
7 #"wxtext\0"
3 6 #"equal?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"loc"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 13 #"cell-location"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"first"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"sto"
7 #"wxtext\0"
3 3 #")))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 14 #"             ("
7 #"wxtext\0"
3 8 #"cell-val"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"first"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"sto"
7 #"wxtext\0"
3 3 #"))]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 13 #"            ["
7 #"wxtext\0"
3 4 #"else"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"fetch"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"loc"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"rest"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"sto"
7 #"wxtext\0"
3 7 #"))])]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #"; Update Store"
0 0 24 29 1 #"\n"
0 8         537 4 2 #"(\0"
2 #")\0"
106 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 3 #"def"
7 #"wxtext\0"
3 1 #"i"
7 #"wxtext\0"
3 2 #"ne"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 12 #"update-store"
7 #"wxtext\0"
3 2 #" ["
7 #"wxtext\0"
3 7 #"pointer"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"number"
7 #"wxtext\0"
3 3 #"] ["
7 #"wxtext\0"
3 9 #"new-value"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"Value"
7 #"wxtext\0"
3 3 #"] ["
7 #"wxtext\0"
3 5 #"store"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"Store"
7 #"wxtext\0"
3 3 #"]) "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"Store"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 4 #"cond"
7 #"wxtext\0"
3 3 #" [("
7 #"wxtext\0"
3 2 #"or"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 1 #"<"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 7 #"pointer"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"0"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 6 #"empty?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"store"
7 #"wxtext\0"
3 4 #")) ("
7 #"wxtext\0"
3 5 #"error"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 14 #"update-Storage"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"\""
7 #"wxtext\0"
3 5 #"index"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"out"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 2 #"of"
7 #"wxtext\0"
3 7 #" bounds"
7 #"wxtext\0"
3 1 #"\""
7 #"wxtext\0"
3 2 #")]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"        [("
7 #"wxtext\0"
3 6 #"equal?"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 13 #"cell-location"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"first"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"store"
7 #"wxtext\0"
3 3 #")) "
7 #"wxtext\0"
3 7 #"pointer"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 4 #"cons"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"cell"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 13 #"cell-location"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"first"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"store"
7 #"wxtext\0"
3 3 #")) "
7 #"wxtext\0"
3 9 #"new-value"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 4 #"rest"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"store"
7 #"wxtext\0"
3 3 #"))]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 9 #"        ["
7 #"wxtext\0"
3 4 #"else"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"cons"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"first"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"store"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 12 #"update-store"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 7 #"pointer"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 9 #"new-value"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"rest"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"store"
7 #"wxtext\0"
3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 45 #"; Allocates a number of Values onto the store"
0 0 24 29 1 #"\n"
0 8         597 4 2 #"(\0"
2 #")\0"
118 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 4 #"defi"
7 #"wxtext\0"
3 1 #"n"
7 #"wxtext\0"
3 1 #"e"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 8 #"allocate"
7 #"wxtext\0"
3 2 #" ["
7 #"wxtext\0"
3 5 #"store"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"Store"
7 #"wxtext\0"
3 3 #"] ["
7 #"wxtext\0"
3 9 #"extend-by"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"number"
7 #"wxtext\0"
3 3 #"] ["
7 #"wxtext\0"
3 5 #"value"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"Value"
7 #"wxtext\0"
3 3 #"]) "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"N*S"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 3 #"let"
7 #"wxtext\0"
3 3 #" (["
7 #"wxtext\0"
3 12 #"baseLocation"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"add1"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 17 #"get-last-location"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"cond"
7 #"wxtext\0"
3 3 #" [("
7 #"wxtext\0"
3 6 #"empty?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"store"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 49 #"                                                ("
7 #"wxtext\0"
3 4 #"list"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"cell"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 2 #"-1"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"numV"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 2 #"-1"
7 #"wxtext\0"
3 5 #")))] "
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 48 #"                                               ["
7 #"wxtext\0"
3 4 #"else"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"store"
7 #"wxtext\0"
3 5 #"])))]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 9 #"        ["
7 #"wxtext\0"
3 12 #"lastLocation"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 17 #"get-last-location"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"cond"
7 #"wxtext\0"
3 3 #" [("
7 #"wxtext\0"
3 6 #"empty?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"store"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 49 #"                                                ("
7 #"wxtext\0"
3 4 #"list"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"cell"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 2 #"-1"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"numV"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 2 #"-1"
7 #"wxtext\0"
3 5 #")))] "
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 48 #"                                               ["
7 #"wxtext\0"
3 4 #"else"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"store"
7 #"wxtext\0"
3 5 #"]))])"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 3 #"n*s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 12 #"baseLocation"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 11 #"append-list"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"store"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 39 #"                                      ("
7 #"wxtext\0"
3 12 #"create-store"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 9 #"extend-by"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 58 #"                                                          "
7 #"wxtext\0"
3 5 #"value"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 59 #"                                                          ("
7 #"wxtext\0"
3 4 #"add1"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 12 #"lastLocation"
7 #"wxtext\0"
3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 17 3 36 #"; Get the last location in the store"
0 0 24 29 1 #"\n"
0 8         137 4 2 #"(\0"
2 #")\0"
26 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 3 #"def"
7 #"wxtext\0"
3 1 #"i"
7 #"wxtext\0"
3 2 #"ne"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 17 #"get-last-location"
7 #"wxtext\0"
3 2 #" ["
7 #"wxtext\0"
3 5 #"store"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"Store"
7 #"wxtext\0"
3 3 #"]) "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 8 #"Location"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 13 #"cell-location"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"first"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 7 #"reverse"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"store"
7 #"wxtext\0"
3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 64
#"; Creates a n cells with a given value and returns the new store"
0 0 24 29 1 #"\n"
0 8         377 4 2 #"(\0"
2 #")\0"
74 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 3 #"def"
7 #"wxtext\0"
3 1 #"i"
7 #"wxtext\0"
3 2 #"ne"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 12 #"create-store"
7 #"wxtext\0"
3 2 #" ["
7 #"wxtext\0"
3 9 #"extend-by"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"number"
7 #"wxtext\0"
3 2 #"] "
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 23 #"                      ["
7 #"wxtext\0"
3 5 #"value"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"Value"
7 #"wxtext\0"
3 2 #"] "
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 23 #"                      ["
7 #"wxtext\0"
3 13 #"last-location"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"number"
7 #"wxtext\0"
3 3 #"]) "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"Store"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 4 #"cond"
7 #"wxtext\0"
3 3 #" [("
7 #"wxtext\0"
3 2 #"<="
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 9 #"extend-by"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"0"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 5 #"empty"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 9 #"        ["
7 #"wxtext\0"
3 4 #"else"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"cons"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"cell"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 13 #"last-location"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"value"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 21 #"                    ("
7 #"wxtext\0"
3 12 #"create-store"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"sub1"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 9 #"extend-by"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 34 #"                                  "
7 #"wxtext\0"
3 5 #"value"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 35 #"                                  ("
7 #"wxtext\0"
3 4 #"add1"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 13 #"last-location"
7 #"wxtext\0"
3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #"; 3.6 Appends two list together"
0 0 24 29 1 #"\n"
0 8         332 4 2 #"(\0"
2 #")\0"
65 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 3 #"def"
7 #"wxtext\0"
3 1 #"i"
7 #"wxtext\0"
3 2 #"ne"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 11 #"append-list"
7 #"wxtext\0"
3 2 #" ["
7 #"wxtext\0"
3 2 #"l1"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 6 #"listof"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 1 #"a"
7 #"wxtext\0"
3 4 #")] ["
7 #"wxtext\0"
3 2 #"l2"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 6 #"listof"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 1 #"a"
7 #"wxtext\0"
3 4 #")]) "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 1 #"a"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 4 #"cond"
7 #"wxtext\0"
3 3 #" [("
7 #"wxtext\0"
3 6 #"empty?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 2 #"l1"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 2 #"l2"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"        [("
7 #"wxtext\0"
3 6 #"empty?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 2 #"l2"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 2 #"l1"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 9 #"        ["
7 #"wxtext\0"
3 4 #"else"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"cons"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"first"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 2 #"l1"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 11 #"append-list"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"rest"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 2 #"l1"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 2 #"l2"
7 #"wxtext\0"
3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";Gets the function associated with the binary operator and returns t"
 #"hat"
) 0 0 24 29 1 #"\n"
0 0 17 3 10 #"; operator"
0 0 24 29 1 #"\n"
0 8         542 4 2 #"(\0"
2 #")\0"
107 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 4 #"defi"
7 #"wxtext\0"
3 1 #"n"
7 #"wxtext\0"
3 1 #"e"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 9 #"get-binop"
7 #"wxtext\0"
3 2 #" ["
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"symbol"
7 #"wxtext\0"
3 3 #"]) "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"Value"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"Value"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 2 #"->"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"Value"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 4 #"cond"
7 #"wxtext\0"
3 3 #" [("
7 #"wxtext\0"
3 6 #"equal?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 1 #"+"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 4 #"num+"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"        [("
7 #"wxtext\0"
3 6 #"equal?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 1 #"*"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 4 #"num*"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"        [("
7 #"wxtext\0"
3 6 #"equal?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 1 #"-"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 4 #"num-"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"        [("
7 #"wxtext\0"
3 6 #"equal?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 1 #"/"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 4 #"num/"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"        [("
7 #"wxtext\0"
3 6 #"equal?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 2 #"<="
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 5 #"num<="
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"        [("
7 #"wxtext\0"
3 6 #"equal?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 3 #"eq?"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 6 #"numeq?"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 9 #"        ["
7 #"wxtext\0"
3 4 #"else"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"error"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 9 #"get-binop"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"\""
7 #"wxtext\0"
3 3 #"NOT"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"A"
7 #"wxtext\0"
3 6 #" BINOP"
7 #"wxtext\0"
3 1 #"\""
7 #"wxtext\0"
3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 44 #"; Takes in two values and adds them together"
0 0 24 29 1 #"\n"
0 8         377 4 2 #"(\0"
2 #")\0"
74 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 4 #"defi"
7 #"wxtext\0"
3 1 #"n"
7 #"wxtext\0"
3 1 #"e"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"num+"
7 #"wxtext\0"
3 2 #" ["
7 #"wxtext\0"
3 1 #"l"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"Value"
7 #"wxtext\0"
3 3 #"] ["
7 #"wxtext\0"
3 1 #"r"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"Value"
7 #"wxtext\0"
3 3 #"]) "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"Value"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 4 #"cond"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"    [("
7 #"wxtext\0"
3 3 #"and"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"numV?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"l"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 5 #"numV?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"r"
7 #"wxtext\0"
3 2 #"))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"     ("
7 #"wxtext\0"
3 4 #"numV"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 1 #"+"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 6 #"numV-n"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"l"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 6 #"numV-n"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"r"
7 #"wxtext\0"
3 4 #")))]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 5 #"    ["
7 #"wxtext\0"
3 4 #"else"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"     ("
7 #"wxtext\0"
3 5 #"error"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 4 #"num+"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"\""
7 #"wxtext\0"
3 3 #"one"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 8 #"argument"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"was"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"not"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"a"
7 #"wxtext\0"
3 7 #" number"
7 #"wxtext\0"
3 1 #"\""
7 #"wxtext\0"
3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 44 #"; Takes in two values and mult them together"
0 0 24 29 1 #"\n"
0 8         377 4 2 #"(\0"
2 #")\0"
74 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 3 #"def"
7 #"wxtext\0"
3 1 #"i"
7 #"wxtext\0"
3 2 #"ne"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"num*"
7 #"wxtext\0"
3 2 #" ["
7 #"wxtext\0"
3 1 #"l"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"Value"
7 #"wxtext\0"
3 3 #"] ["
7 #"wxtext\0"
3 1 #"r"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"Value"
7 #"wxtext\0"
3 3 #"]) "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"Value"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 4 #"cond"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"    [("
7 #"wxtext\0"
3 3 #"and"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"numV?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"l"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 5 #"numV?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"r"
7 #"wxtext\0"
3 2 #"))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"     ("
7 #"wxtext\0"
3 4 #"numV"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 1 #"*"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 6 #"numV-n"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"l"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 6 #"numV-n"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"r"
7 #"wxtext\0"
3 4 #")))]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 5 #"    ["
7 #"wxtext\0"
3 4 #"else"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"     ("
7 #"wxtext\0"
3 5 #"error"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 4 #"num*"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"\""
7 #"wxtext\0"
3 3 #"one"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 8 #"argument"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"was"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"not"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"a"
7 #"wxtext\0"
3 7 #" number"
7 #"wxtext\0"
3 1 #"\""
7 #"wxtext\0"
3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 41 #"; Takes in two values and / them together"
0 0 24 29 1 #"\n"
0 8         517 4 2 #"(\0"
2 #")\0"
102 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 3 #"def"
7 #"wxtext\0"
3 1 #"i"
7 #"wxtext\0"
3 2 #"ne"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"num/"
7 #"wxtext\0"
3 2 #" ["
7 #"wxtext\0"
3 1 #"l"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"Value"
7 #"wxtext\0"
3 3 #"] ["
7 #"wxtext\0"
3 1 #"r"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"Value"
7 #"wxtext\0"
3 3 #"]) "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"Value"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 4 #"cond"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"    [("
7 #"wxtext\0"
3 3 #"and"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"numV?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"r"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 1 #"="
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 6 #"numV-n"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"r"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 1 #"0"
7 #"wxtext\0"
3 4 #")) ("
7 #"wxtext\0"
3 5 #"error"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 4 #"num/"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"\""
7 #"wxtext\0"
3 8 #"Division"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 2 #"by"
7 #"wxtext\0"
3 5 #" zero"
7 #"wxtext\0"
3 1 #"\""
7 #"wxtext\0"
3 2 #")]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"    [("
7 #"wxtext\0"
3 3 #"and"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"numV?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"l"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 5 #"numV?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"r"
7 #"wxtext\0"
3 2 #"))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"     ("
7 #"wxtext\0"
3 4 #"numV"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 1 #"/"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 6 #"numV-n"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"l"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 6 #"numV-n"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"r"
7 #"wxtext\0"
3 4 #")))]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 5 #"    ["
7 #"wxtext\0"
3 4 #"else"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"     ("
7 #"wxtext\0"
3 5 #"error"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 4 #"num/"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"\""
7 #"wxtext\0"
3 3 #"one"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 8 #"argument"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"was"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"not"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"a"
7 #"wxtext\0"
3 7 #" number"
7 #"wxtext\0"
3 1 #"\""
7 #"wxtext\0"
3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 41 #"; Takes in two values and - them together"
0 0 24 29 1 #"\n"
0 8         377 4 2 #"(\0"
2 #")\0"
74 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 3 #"def"
7 #"wxtext\0"
3 1 #"i"
7 #"wxtext\0"
3 2 #"ne"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"num-"
7 #"wxtext\0"
3 2 #" ["
7 #"wxtext\0"
3 1 #"l"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"Value"
7 #"wxtext\0"
3 3 #"] ["
7 #"wxtext\0"
3 1 #"r"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"Value"
7 #"wxtext\0"
3 3 #"]) "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"Value"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 4 #"cond"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"    [("
7 #"wxtext\0"
3 3 #"and"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"numV?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"l"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 5 #"numV?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"r"
7 #"wxtext\0"
3 2 #"))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"     ("
7 #"wxtext\0"
3 4 #"numV"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 1 #"-"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 6 #"numV-n"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"l"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 6 #"numV-n"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"r"
7 #"wxtext\0"
3 4 #")))]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 5 #"    ["
7 #"wxtext\0"
3 4 #"else"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"     ("
7 #"wxtext\0"
3 5 #"error"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 4 #"num-"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"\""
7 #"wxtext\0"
3 3 #"one"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 8 #"argument"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"was"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"not"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"a"
7 #"wxtext\0"
3 7 #" number"
7 #"wxtext\0"
3 1 #"\""
7 #"wxtext\0"
3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 42 #"; Takes in two values and <= them together"
0 0 24 29 1 #"\n"
0 8         377 4 2 #"(\0"
2 #")\0"
74 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 3 #"def"
7 #"wxtext\0"
3 1 #"i"
7 #"wxtext\0"
3 2 #"ne"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"num<="
7 #"wxtext\0"
3 2 #" ["
7 #"wxtext\0"
3 1 #"l"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"Value"
7 #"wxtext\0"
3 3 #"] ["
7 #"wxtext\0"
3 1 #"r"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"Value"
7 #"wxtext\0"
3 3 #"]) "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"Value"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 4 #"cond"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"    [("
7 #"wxtext\0"
3 3 #"and"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"numV?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"l"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 5 #"numV?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"r"
7 #"wxtext\0"
3 2 #"))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"     ("
7 #"wxtext\0"
3 8 #"booleanV"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 2 #"<="
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 6 #"numV-n"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"l"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 6 #"numV-n"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"r"
7 #"wxtext\0"
3 4 #")))]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 5 #"    ["
7 #"wxtext\0"
3 4 #"else"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"     ("
7 #"wxtext\0"
3 5 #"error"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 4 #"num-"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"\""
7 #"wxtext\0"
3 3 #"one"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 8 #"argument"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"was"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"not"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"a"
7 #"wxtext\0"
3 7 #" number"
7 #"wxtext\0"
3 1 #"\""
7 #"wxtext\0"
3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 43 #"; Takes in two values and eq? them together"
0 0 24 29 1 #"\n"
0 8         432 4 2 #"(\0"
2 #")\0"
85 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 3 #"def"
7 #"wxtext\0"
3 1 #"i"
7 #"wxtext\0"
3 2 #"ne"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 6 #"numeq?"
7 #"wxtext\0"
3 2 #" ["
7 #"wxtext\0"
3 1 #"l"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"Value"
7 #"wxtext\0"
3 3 #"] ["
7 #"wxtext\0"
3 1 #"r"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"Value"
7 #"wxtext\0"
3 3 #"]) "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"Value"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 4 #"cond"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"    [("
7 #"wxtext\0"
3 3 #"and"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"numV?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"l"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 5 #"numV?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"r"
7 #"wxtext\0"
3 2 #"))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"     ("
7 #"wxtext\0"
3 8 #"booleanV"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 3 #"eq?"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 6 #"numV-n"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"l"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 6 #"numV-n"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"r"
7 #"wxtext\0"
3 4 #")))]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"    [("
7 #"wxtext\0"
3 3 #"and"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 9 #"booleanV?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"l"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 9 #"booleanV?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"r"
7 #"wxtext\0"
3 2 #"))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"     ("
7 #"wxtext\0"
3 8 #"booleanV"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 3 #"eq?"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 10 #"booleanV-b"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"l"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 10 #"booleanV-b"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"r"
7 #"wxtext\0"
3 4 #")))]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 5 #"    ["
7 #"wxtext\0"
3 4 #"else"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 8 #"booleanV"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"false"
7 #"wxtext\0"
3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #"; Takes a list of exprc and returns a list of values. To be used in "
 #"eval."
) 0 0 24 29 1 #"\n"
0 8         542 4 2 #"(\0"
2 #")\0"
107 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 3 #"def"
7 #"wxtext\0"
3 1 #"i"
7 #"wxtext\0"
3 2 #"ne"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 15 #"get-values-eval"
7 #"wxtext\0"
3 2 #" ["
7 #"wxtext\0"
3 5 #"exprs"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 6 #"listof"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"ExprC"
7 #"wxtext\0"
3 2 #")]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 26 #"                         ["
7 #"wxtext\0"
3 3 #"env"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"Env"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 26 #"                         ["
7 #"wxtext\0"
3 5 #"store"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"Store"
7 #"wxtext\0"
3 3 #"]) "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 4 #"LV*S"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 12 #"           ("
7 #"wxtext\0"
3 4 #"cond"
7 #"wxtext\0"
3 3 #" [("
7 #"wxtext\0"
3 6 #"empty?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"exprs"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 4 #"lv*s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"empty"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"store"
7 #"wxtext\0"
3 2 #")]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 18 #"                 ["
7 #"wxtext\0"
3 4 #"else"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 21 #"                    ("
7 #"wxtext\0"
3 9 #"type-case"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"Result"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"eval"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"first"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"exprs"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 3 #"env"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"store"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 23 #"                      ["
7 #"wxtext\0"
3 3 #"v*s"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"v-exp"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"s-exp"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 28 #"                           ("
7 #"wxtext\0"
3 3 #"let"
7 #"wxtext\0"
3 3 #" (["
7 #"wxtext\0"
3 6 #"others"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 15 #"get-values-eval"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"rest"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"exprs"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 3 #"env"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"s-exp"
7 #"wxtext\0"
3 3 #")])"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 19 #"                  ("
7 #"wxtext\0"
3 4 #"lv*s"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"cons"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"v-exp"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 11 #"lv*s-values"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"others"
7 #"wxtext\0"
3 4 #")) ("
7 #"wxtext\0"
3 10 #"lv*s-store"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"others"
7 #"wxtext\0"
3 8 #")))])]))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #"; Creates a list of binding from teh fdC-Arg and teh argument to the"
 #" function"
) 0 0 24 29 1 #"\n"
0 0 17 3 2 #"#;"
0 8         397 4 2 #"(\0"
2 #")\0"
78 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 1 #"d"
7 #"wxtext\0"
3 1 #"e"
7 #"wxtext\0"
3 1 #"f"
7 #"wxtext\0"
3 3 #"ine"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 16 #"get-list-binding"
7 #"wxtext\0"
3 2 #" ["
7 #"wxtext\0"
3 4 #"syms"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 6 #"listof"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"symbol"
7 #"wxtext\0"
3 2 #")]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 27 #"                          ["
7 #"wxtext\0"
3 1 #"a"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 6 #"listof"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"Value"
7 #"wxtext\0"
3 2 #")]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 27 #"                          ["
7 #"wxtext\0"
3 3 #"env"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"Env"
7 #"wxtext\0"
3 3 #"]) "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 6 #"listof"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 7 #"Binding"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 4 #"cond"
7 #"wxtext\0"
3 3 #" [("
7 #"wxtext\0"
3 6 #"empty?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"a"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 3 #"env"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 9 #"        ["
7 #"wxtext\0"
3 4 #"else"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"cons"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"bind"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"first"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 4 #"syms"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 5 #"first"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"a"
7 #"wxtext\0"
3 4 #")) ("
7 #"wxtext\0"
3 16 #"get-list-binding"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"rest"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 4 #"syms"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 4 #"rest"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"a"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 3 #"env"
7 #"wxtext\0"
3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #"; Checks to see if a symbol is a binary operator and returns true if"
 #" it is"
) 0 0 24 29 1 #"\n"
0 8         457 4 2 #"(\0"
2 #")\0"
90 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 3 #"def"
7 #"wxtext\0"
3 1 #"i"
7 #"wxtext\0"
3 2 #"ne"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 14 #"check-if-binop"
7 #"wxtext\0"
3 2 #" ["
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"symbol"
7 #"wxtext\0"
3 3 #"]) "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 7 #"boolean"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 4 #"cond"
7 #"wxtext\0"
3 3 #" [("
7 #"wxtext\0"
3 6 #"equal?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 1 #"+"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 4 #"true"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"        [("
7 #"wxtext\0"
3 6 #"equal?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 1 #"*"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 4 #"true"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"        [("
7 #"wxtext\0"
3 6 #"equal?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 1 #"-"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 4 #"true"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"        [("
7 #"wxtext\0"
3 6 #"equal?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 1 #"/"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 4 #"true"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"        [("
7 #"wxtext\0"
3 6 #"equal?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 2 #"<="
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 4 #"true"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"        [("
7 #"wxtext\0"
3 6 #"equal?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 3 #"eq?"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 4 #"true"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 9 #"        ["
7 #"wxtext\0"
3 4 #"else"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"false"
7 #"wxtext\0"
3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #"; Checks to see if a symbol is a reserved symbol and returns true if"
 #" it is"
) 0 0 24 29 1 #"\n"
0 8         952 4 2 #"(\0"
2 #")\0"
189 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 3 #"def"
7 #"wxtext\0"
3 1 #"i"
7 #"wxtext\0"
3 2 #"ne"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 24 #"check-if-reserved-symbol"
7 #"wxtext\0"
3 2 #" ["
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"symbol"
7 #"wxtext\0"
3 3 #"]) "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 7 #"boolean"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 4 #"cond"
7 #"wxtext\0"
3 3 #" [("
7 #"wxtext\0"
3 6 #"equal?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 1 #"+"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 4 #"true"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"        [("
7 #"wxtext\0"
3 6 #"equal?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 1 #"*"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 4 #"true"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"        [("
7 #"wxtext\0"
3 6 #"equal?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 1 #"-"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 4 #"true"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"        [("
7 #"wxtext\0"
3 6 #"equal?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 1 #"/"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 4 #"true"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"        [("
7 #"wxtext\0"
3 6 #"equal?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 2 #"<="
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 4 #"true"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"        [("
7 #"wxtext\0"
3 6 #"equal?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 2 #"if"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 4 #"true"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"        [("
7 #"wxtext\0"
3 6 #"equal?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 3 #"eq?"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 4 #"true"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"        [("
7 #"wxtext\0"
3 6 #"equal?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 4 #"true"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 4 #"true"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"        [("
7 #"wxtext\0"
3 6 #"equal?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 5 #"false"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 4 #"true"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"        [("
7 #"wxtext\0"
3 6 #"equal?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 4 #"with"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 4 #"true"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"        [("
7 #"wxtext\0"
3 6 #"equal?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 2 #"fn"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 4 #"true"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"        [("
7 #"wxtext\0"
3 6 #"equal?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 4 #"with"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 4 #"true"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"        [("
7 #"wxtext\0"
3 6 #"equal?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 2 #"<-"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 4 #"true"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"        [("
7 #"wxtext\0"
3 6 #"equal?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 1 #"="
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 4 #"true"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"        [("
7 #"wxtext\0"
3 6 #"equal?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 9 #"new-array"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 4 #"true"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 9 #"        ["
7 #"wxtext\0"
3 4 #"else"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"false"
7 #"wxtext\0"
3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #"; Checks to see if a symbol is a reserved symbol and returns true if"
 #" it is"
) 0 0 24 29 1 #"\n"
0 8         787 4 2 #"(\0"
2 #")\0"
156 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 4 #"defi"
7 #"wxtext\0"
3 1 #"n"
7 #"wxtext\0"
3 1 #"e"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 45 #"check-if-reserved-symbol-excluding-true-false"
7 #"wxtext\0"
3 2 #" ["
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"symbol"
7 #"wxtext\0"
3 3 #"]) "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 7 #"boolean"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 4 #"cond"
7 #"wxtext\0"
3 3 #" [("
7 #"wxtext\0"
3 6 #"equal?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 1 #"+"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 4 #"true"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"        [("
7 #"wxtext\0"
3 6 #"equal?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 1 #"*"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 4 #"true"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"        [("
7 #"wxtext\0"
3 6 #"equal?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 1 #"-"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 4 #"true"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"        [("
7 #"wxtext\0"
3 6 #"equal?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 1 #"/"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 4 #"true"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"        [("
7 #"wxtext\0"
3 6 #"equal?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 2 #"<="
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 4 #"true"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"        [("
7 #"wxtext\0"
3 6 #"equal?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 2 #"if"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 4 #"true"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"        [("
7 #"wxtext\0"
3 6 #"equal?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 3 #"eq?"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 4 #"true"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"        [("
7 #"wxtext\0"
3 6 #"equal?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 4 #"with"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 4 #"true"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"        [("
7 #"wxtext\0"
3 6 #"equal?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 2 #"<-"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 4 #"true"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"        [("
7 #"wxtext\0"
3 6 #"equal?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 1 #"="
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 4 #"true"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"        [("
7 #"wxtext\0"
3 6 #"equal?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 9 #"new-array"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 4 #"true"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"        [("
7 #"wxtext\0"
3 6 #"equal?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 2 #"fn"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 4 #"true"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 9 #"        ["
7 #"wxtext\0"
3 4 #"else"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"false"
7 #"wxtext\0"
3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #"; Searches through a list of symbols to see if a symbol s is in the "
 #"list."
) 0 0 24 29 1 #"\n"
0 0 17 3 41 #"; returns true if it is, false otherwise."
0 0 24 29 1 #"\n"
0 8         297 4 2 #"(\0"
2 #")\0"
58 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 2 #"de"
7 #"wxtext\0"
3 1 #"f"
7 #"wxtext\0"
3 3 #"ine"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 13 #"check-in-list"
7 #"wxtext\0"
3 2 #" ["
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"symbol"
7 #"wxtext\0"
3 3 #"] ["
7 #"wxtext\0"
3 3 #"lst"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 6 #"listof"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"symbol"
7 #"wxtext\0"
3 4 #")]) "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 7 #"boolean"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 4 #"cond"
7 #"wxtext\0"
3 3 #" [("
7 #"wxtext\0"
3 6 #"empty?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"lst"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 5 #"false"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"        [("
7 #"wxtext\0"
3 8 #"symbol=?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"first"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"lst"
7 #"wxtext\0"
3 3 #")) "
7 #"wxtext\0"
3 4 #"true"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 9 #"        ["
7 #"wxtext\0"
3 4 #"else"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 13 #"check-in-list"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"rest"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"lst"
7 #"wxtext\0"
3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #"; Takes in a list of symbols and returns true if a symbol in the lis"
 #"t"
) 0 0 24 29 1 #"\n"
0 0 17 3 54 #"; is the same as the reserved symbol. False otherwise."
0 0 24 29 1 #"\n"
0 8         292 4 2 #"(\0"
2 #")\0"
57 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 2 #"de"
7 #"wxtext\0"
3 1 #"f"
7 #"wxtext\0"
3 1 #"i"
7 #"wxtext\0"
3 2 #"ne"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 18 #"not-valid-symbols?"
7 #"wxtext\0"
3 2 #" ["
7 #"wxtext\0"
3 4 #"syms"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 6 #"listof"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"symbol"
7 #"wxtext\0"
3 4 #")]) "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 7 #"boolean"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 4 #"cond"
7 #"wxtext\0"
3 3 #" [("
7 #"wxtext\0"
3 6 #"empty?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 4 #"syms"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 5 #"false"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"        [("
7 #"wxtext\0"
3 24 #"check-if-reserved-symbol"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"first"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 4 #"syms"
7 #"wxtext\0"
3 4 #")) ("
7 #"wxtext\0"
3 5 #"error"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 9 #"not-valid"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"\""
7 #"wxtext\0"
3 7 #"Invalid"
7 #"wxtext\0"
3 6 #" input"
7 #"wxtext\0"
3 1 #"\""
7 #"wxtext\0"
3 2 #")]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 9 #"        ["
7 #"wxtext\0"
3 4 #"else"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 18 #"not-valid-symbols?"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"rest"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 4 #"syms"
7 #"wxtext\0"
3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #"; Checks if a symbol is a boolean"
0 0 24 29 1 #"\n"
0 8         212 4 2 #"(\0"
2 #")\0"
41 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 3 #"def"
7 #"wxtext\0"
3 1 #"i"
7 #"wxtext\0"
3 2 #"ne"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 16 #"check-if-boolean"
7 #"wxtext\0"
3 2 #" ["
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"symbol"
7 #"wxtext\0"
3 2 #"])"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 4 #"cond"
7 #"wxtext\0"
3 3 #" [("
7 #"wxtext\0"
3 2 #"or"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 6 #"equal?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 4 #"true"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 6 #"equal?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 5 #"false"
7 #"wxtext\0"
3 3 #")) "
7 #"wxtext\0"
3 4 #"true"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 9 #"        ["
7 #"wxtext\0"
3 4 #"else"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"false"
7 #"wxtext\0"
3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #"; Checks returns the correct booleanC"
0 0 24 29 1 #"\n"
0 8         227 4 2 #"(\0"
2 #")\0"
44 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 3 #"def"
7 #"wxtext\0"
3 1 #"i"
7 #"wxtext\0"
3 2 #"ne"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 17 #"get-boolean-value"
7 #"wxtext\0"
3 2 #" ["
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"symbol"
7 #"wxtext\0"
3 3 #"]) "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"ExprC"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 4 #"cond"
7 #"wxtext\0"
3 3 #" [("
7 #"wxtext\0"
3 6 #"equal?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 4 #"true"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 8 #"booleanC"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 4 #"true"
7 #"wxtext\0"
3 2 #")]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"        [("
7 #"wxtext\0"
3 6 #"equal?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 5 #"false"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 8 #"booleanC"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"false"
7 #"wxtext\0"
3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 43 #"; Gets the parameters from a with statement"
0 0 24 29 1 #"\n"
0 8         522 4 2 #"(\0"
2 #")\0"
103 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 3 #"def"
7 #"wxtext\0"
3 1 #"i"
7 #"wxtext\0"
3 2 #"ne"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 10 #"get-params"
7 #"wxtext\0"
3 2 #" ["
7 #"wxtext\0"
3 4 #"args"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 12 #"s-expression"
7 #"wxtext\0"
3 3 #"] ["
7 #"wxtext\0"
3 4 #"syms"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 6 #"listof"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"symbol"
7 #"wxtext\0"
3 4 #")]) "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 6 #"listof"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"symbol"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 4 #"cond"
7 #"wxtext\0"
3 3 #" [("
7 #"wxtext\0"
3 6 #"empty?"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 11 #"s-exp->list"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 4 #"args"
7 #"wxtext\0"
3 3 #")) "
7 #"wxtext\0"
3 4 #"syms"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"        [("
7 #"wxtext\0"
3 12 #"s-exp-match?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 1 #"{"
7 #"wxtext\0"
3 6 #"SYMBOL"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"="
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"ANY"
7 #"wxtext\0"
3 3 #"} ("
7 #"wxtext\0"
3 5 #"first"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 11 #"s-exp->list"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 4 #"args"
7 #"wxtext\0"
3 3 #")))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"         ("
7 #"wxtext\0"
3 4 #"cons"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 13 #"s-exp->symbol"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"first"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 11 #"s-exp->list"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"first"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 11 #"s-exp->list"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 4 #"args"
7 #"wxtext\0"
3 5 #")))))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 16 #"               ("
7 #"wxtext\0"
3 10 #"get-params"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 11 #"list->s-exp"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"rest"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 11 #"s-exp->list"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 4 #"args"
7 #"wxtext\0"
3 4 #"))) "
7 #"wxtext\0"
3 4 #"syms"
7 #"wxtext\0"
3 3 #"))]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 9 #"        ["
7 #"wxtext\0"
3 4 #"else"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 10 #"get-params"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 11 #"list->s-exp"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"rest"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 11 #"s-exp->list"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 4 #"args"
7 #"wxtext\0"
3 4 #"))) "
7 #"wxtext\0"
3 4 #"syms"
7 #"wxtext\0"
3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 60
#"; Gets the expression to be evalueated from a with statement"
0 0 24 29 1 #"\n"
0 8         417 4 2 #"(\0"
2 #")\0"
82 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 4 #"defi"
7 #"wxtext\0"
3 1 #"n"
7 #"wxtext\0"
3 1 #"e"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 10 #"get-values"
7 #"wxtext\0"
3 2 #" ["
7 #"wxtext\0"
3 4 #"args"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 12 #"s-expression"
7 #"wxtext\0"
3 3 #"]) "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"ExprC"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 4 #"cond"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"    [("
7 #"wxtext\0"
3 6 #"empty?"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 11 #"s-exp->list"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 4 #"args"
7 #"wxtext\0"
3 4 #")) ("
7 #"wxtext\0"
3 5 #"error"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 10 #"get-values"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"\""
7 #"wxtext\0"
3 7 #"Invalid"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"input"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 2 #":("
7 #"wxtext\0"
3 1 #"\""
7 #"wxtext\0"
3 2 #")]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"    [("
7 #"wxtext\0"
3 3 #"not"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 12 #"s-exp-match?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 1 #"{"
7 #"wxtext\0"
3 6 #"SYMBOL"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"="
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"ANY"
7 #"wxtext\0"
3 3 #"} ("
7 #"wxtext\0"
3 5 #"first"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 11 #"s-exp->list"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 4 #"args"
7 #"wxtext\0"
3 6 #")))) ("
7 #"wxtext\0"
3 5 #"parse"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"first"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 11 #"s-exp->list"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 4 #"args"
7 #"wxtext\0"
3 4 #")))]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 5 #"    ["
7 #"wxtext\0"
3 4 #"else"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 10 #"get-values"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 11 #"list->s-exp"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"rest"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 11 #"s-exp->list"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 4 #"args"
7 #"wxtext\0"
3 7 #"))))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #"; Gets and parses the rhs of the varaible declarations in a with sta"
 #"tement"
) 0 0 24 29 1 #"\n"
0 8         512 4 2 #"(\0"
2 #")\0"
101 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 3 #"def"
7 #"wxtext\0"
3 1 #"i"
7 #"wxtext\0"
3 2 #"ne"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 14 #"get-list-exprC"
7 #"wxtext\0"
3 2 #" ["
7 #"wxtext\0"
3 4 #"args"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 12 #"s-expression"
7 #"wxtext\0"
3 3 #"] ["
7 #"wxtext\0"
3 9 #"exprClist"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 6 #"listof"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"ExprC"
7 #"wxtext\0"
3 4 #")]) "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 6 #"listof"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"ExprC"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 4 #"cond"
7 #"wxtext\0"
3 3 #" [("
7 #"wxtext\0"
3 6 #"empty?"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 11 #"s-exp->list"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 4 #"args"
7 #"wxtext\0"
3 3 #")) "
7 #"wxtext\0"
3 9 #"exprClist"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"        [("
7 #"wxtext\0"
3 12 #"s-exp-match?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 1 #"{"
7 #"wxtext\0"
3 6 #"SYMBOL"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"="
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"ANY"
7 #"wxtext\0"
3 3 #"} ("
7 #"wxtext\0"
3 5 #"first"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 11 #"s-exp->list"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 4 #"args"
7 #"wxtext\0"
3 3 #")))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"         ("
7 #"wxtext\0"
3 4 #"cons"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"parse"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"third"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 11 #"s-exp->list"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"first"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 11 #"s-exp->list"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 4 #"args"
7 #"wxtext\0"
3 7 #"))))) ("
7 #"wxtext\0"
3 14 #"get-list-exprC"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 11 #"list->s-exp"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"rest"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 11 #"s-exp->list"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 4 #"args"
7 #"wxtext\0"
3 4 #"))) "
7 #"wxtext\0"
3 9 #"exprClist"
7 #"wxtext\0"
3 3 #"))]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 9 #"        ["
7 #"wxtext\0"
3 4 #"else"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 14 #"get-list-exprC"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 11 #"list->s-exp"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"rest"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 11 #"s-exp->list"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 4 #"args"
7 #"wxtext\0"
3 4 #"))) "
7 #"wxtext\0"
3 9 #"exprClist"
7 #"wxtext\0"
3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #"; Test to see if symbol is being used that is reserve symbol. Takes "
 #"in an"
) 0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #"; s expression and a position to operate on and then check if it is "
 #"a"
) 0 0 24 29 1 #"\n"
0 0 17 3 17 #"; reserve symbol."
0 0 24 29 1 #"\n"
0 8         287 4 2 #"(\0"
2 #")\0"
56 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 4 #"defi"
7 #"wxtext\0"
3 1 #"n"
7 #"wxtext\0"
3 1 #"e"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 17 #"test-of-operators"
7 #"wxtext\0"
3 2 #" ["
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 12 #"s-expression"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 28 #"                           ["
7 #"wxtext\0"
3 8 #"position"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 3 #" (("
7 #"wxtext\0"
3 6 #"listof"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 1 #"a"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 2 #"->"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 1 #"a"
7 #"wxtext\0"
3 4 #")]) "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 7 #"boolean"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 3 #"and"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 13 #"s-exp-symbol?"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 8 #"position"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 11 #"s-exp->list"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 3 #")))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 8 #"       ("
7 #"wxtext\0"
3 24 #"check-if-reserved-symbol"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 13 #"s-exp->symbol"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 8 #"position"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 11 #"s-exp->list"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";Creates and appC by using the map operator on an S expression"
0 0 24 29 1 #"\n"
0 8         207 4 2 #"(\0"
2 #")\0"
40 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 2 #"de"
7 #"wxtext\0"
3 1 #"f"
7 #"wxtext\0"
3 3 #"ine"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 11 #"create-appC"
7 #"wxtext\0"
3 2 #" ["
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 12 #"s-expression"
7 #"wxtext\0"
3 3 #"]) "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 5 #"ExprC"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 4 #"appC"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"parse"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"first"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 11 #"s-exp->list"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 3 #")))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 9 #"        ("
7 #"wxtext\0"
3 3 #"map"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"parse"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"rest"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 11 #"s-exp->list"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 67
#"; Creates a List of symbols from an s-expresssion to be used in fdC"
0 0 24 29 1 #"\n"
0 8         172 4 2 #"(\0"
2 #")\0"
33 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 4 #"defi"
7 #"wxtext\0"
3 1 #"n"
7 #"wxtext\0"
3 1 #"e"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 11 #"create-list"
7 #"wxtext\0"
3 2 #" ["
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 12 #"s-expression"
7 #"wxtext\0"
3 3 #"]) "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 6 #"listof"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"symbol"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 3 #"map"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 13 #"s-exp->symbol"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 11 #"s-exp->list"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 6 #"second"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 11 #"s-exp->list"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 50 #"; Check to see if a list of symbols has duplicets."
0 0 24 29 1 #"\n"
0 0 17 3 18 #"; True => no dupes"
0 0 24 29 1 #"\n"
0 8         217 4 2 #"(\0"
2 #")\0"
42 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 4 #"defi"
7 #"wxtext\0"
3 1 #"n"
7 #"wxtext\0"
3 1 #"e"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 16 #"list-has-no-dups"
7 #"wxtext\0"
3 2 #" ["
7 #"wxtext\0"
3 1 #"l"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 6 #"listof"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"symbol"
7 #"wxtext\0"
3 4 #")]) "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 7 #"boolean"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 4 #"cond"
7 #"wxtext\0"
3 3 #" [("
7 #"wxtext\0"
3 6 #"empty?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"l"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 4 #"true"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 9 #"        ["
7 #"wxtext\0"
3 4 #"else"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 11 #"check-dupes"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"first"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"l"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 4 #"rest"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"l"
7 #"wxtext\0"
3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #"; Takes a symbol and a list and checkes whether that symbol is in th"
 #"e list."
) 0 0 24 29 1 #"\n"
0 0 17 3 48 #"; returns true if the symbol is not in the list."
0 0 24 29 1 #"\n"
0 8         347 4 2 #"(\0"
2 #")\0"
68 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 2 #"de"
7 #"wxtext\0"
3 1 #"f"
7 #"wxtext\0"
3 3 #"ine"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 11 #"check-dupes"
7 #"wxtext\0"
3 2 #" ["
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"symbol"
7 #"wxtext\0"
3 3 #"] ["
7 #"wxtext\0"
3 1 #"l"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 6 #"listof"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"symbol"
7 #"wxtext\0"
3 4 #")]) "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 7 #"boolean"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 4 #"cond"
7 #"wxtext\0"
3 3 #" [("
7 #"wxtext\0"
3 6 #"empty?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"l"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 4 #"true"
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 9 #"        ["
7 #"wxtext\0"
3 4 #"else"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 3 #"and"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 3 #"and"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 3 #"not"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 3 #"eq?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"first"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"l"
7 #"wxtext\0"
3 5 #"))) ("
7 #"wxtext\0"
3 11 #"check-dupes"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"rest"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"l"
7 #"wxtext\0"
3 3 #")))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 20 #"                   ("
7 #"wxtext\0"
3 16 #"list-has-no-dups"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"rest"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"l"
7 #"wxtext\0"
3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #"; Parses the s expression and the list of function expressions and t"
 #"hen"
) 0 0 24 29 1 #"\n"
0 0 17 3 12 #"; calls eval"
0 0 24 29 1 #"\n"
0 8         157 4 2 #"(\0"
2 #")\0"
30 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 2 #"de"
7 #"wxtext\0"
3 1 #"f"
7 #"wxtext\0"
3 3 #"ine"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 8 #"top-eval"
7 #"wxtext\0"
3 2 #" ["
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 12 #"s-expression"
7 #"wxtext\0"
3 3 #"]) "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"string"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 9 #"serialize"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"eval"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"parse"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"s"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 5 #"empty"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"empty"
7 #"wxtext\0"
3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 52 #"; Takes a Value and outputs the string version of it"
0 0 24 29 1 #"\n"
0 8         427 4 2 #"(\0"
2 #")\0"
84 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 4 #"defi"
7 #"wxtext\0"
3 1 #"n"
7 #"wxtext\0"
3 1 #"e"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 9 #"serialize"
7 #"wxtext\0"
3 2 #" ["
7 #"wxtext\0"
3 1 #"e"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"Result"
7 #"wxtext\0"
3 3 #"]) "
7 #"wxtext\0"
3 1 #":"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"string"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 4 #"cond"
7 #"wxtext\0"
3 3 #" [("
7 #"wxtext\0"
3 5 #"numV?"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"v*s-v"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"e"
7 #"wxtext\0"
3 4 #")) ("
7 #"wxtext\0"
3 9 #"to-string"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 6 #"numV-n"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"v*s-v"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"e"
7 #"wxtext\0"
3 4 #")))]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"        [("
7 #"wxtext\0"
3 9 #"booleanV?"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"v*s-v"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"e"
7 #"wxtext\0"
3 2 #"))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"         ("
7 #"wxtext\0"
3 4 #"cond"
7 #"wxtext\0"
3 3 #" [("
7 #"wxtext\0"
3 10 #"booleanV-b"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"v*s-v"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"e"
7 #"wxtext\0"
3 3 #")) "
7 #"wxtext\0"
3 5 #"\"true"
7 #"wxtext\0"
3 1 #"\""
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 16 #"               ["
7 #"wxtext\0"
3 4 #"else"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"\"false"
7 #"wxtext\0"
3 1 #"\""
7 #"wxtext\0"
3 3 #"])]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"        [("
7 #"wxtext\0"
3 6 #"closV?"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"v*s-v"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"e"
7 #"wxtext\0"
3 3 #")) "
7 #"wxtext\0"
3 13 #"\"#<procedure>"
7 #"wxtext\0"
3 1 #"\""
7 #"wxtext\0"
3 1 #"]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"        [("
7 #"wxtext\0"
3 7 #"arrayV?"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"v*s-v"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"e"
7 #"wxtext\0"
3 3 #")) "
7 #"wxtext\0"
3 9 #"\"#<array>"
7 #"wxtext\0"
3 1 #"\""
7 #"wxtext\0"
3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";===============TEST CASES======================="
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #"}) ("
0 0 14 3 5 #"binop"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #") ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #"}) ("
0 0 14 3 5 #"binop"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #") ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #"}) ("
0 0 14 3 5 #"binop"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #") ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #"}) ("
0 0 14 3 5 #"binop"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #") ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #"}) ("
0 0 14 3 5 #"binop"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #") ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 2 #"<="
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #"}) ("
0 0 14 3 5 #"binop"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"<="
0 0 24 3 2 #" ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #") ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #"}) "
0 0 14 3 5 #"empty"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 3 #") ("
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #"}) "
0 0 14 3 5 #"empty"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 3 #") ("
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #"}) "
0 0 14 3 5 #"empty"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 3 #") ("
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #"}) "
0 0 14 3 5 #"empty"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 3 #") ("
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 3 #"5/2"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #"}) "
0 0 14 3 5 #"empty"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 3 #") ("
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 8 #"booleanV"
0 0 24 3 1 #" "
0 0 14 3 5 #"false"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 2 #"<="
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #"}) "
0 0 14 3 5 #"empty"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 3 #") ("
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 8 #"booleanV"
0 0 24 3 1 #" "
0 0 14 3 5 #"false"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 9 #"new-array"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #"}) "
0 0 14 3 5 #"empty"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 6 #"arrayV"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 9 #"new-array"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 4 #"}) ("
0 0 14 3 9 #"newArrayC"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #") ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 29 #"; Used to make testing easeir"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"test-store"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #" ("
0 0 14 3 8 #"booleanV"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"test-store-2"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #" ("
0 0 14 3 8 #"booleanV"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"test-store-array"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #" ("
0 0 14 3 8 #"booleanV"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #" ("
0 0 14 3 6 #"arrayV"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 2 #"11"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 2 #"11"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"test-binding"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"bind"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 3 #") ("
0 0 14 3 4 #"bind"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 8 #"allocate"
0 0 24 3 1 #" "
0 0 14 3 10 #"test-store"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"n*s"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 53 #"                                                    ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 53 #"                                                    ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #" ("
0 0 14 3 8 #"booleanV"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 53 #"                                                    ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 54 #"                                                     ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 55 #"                                                      ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 12 #"update-store"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 2 #") "
0 0 14 3 10 #"test-store"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 5 #"fetch"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 14 3 10 #"test-store"
0 0 24 3 3 #") ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 17 #"get-last-location"
0 0 24 3 1 #" "
0 0 14 3 10 #"test-store"
0 0 24 3 2 #") "
0 0 21 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 9 #"new-array"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 3 #"}) "
0 0 14 3 5 #"empty"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 5 #")))) "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 6 #"arrayV"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 14 3 2 #"<-"
0 0 24 3 2 #" {"
0 0 14 3 9 #"new-array"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 4 #"}}) "
0 0 14 3 12 #"test-binding"
0 0 24 3 1 #" "
0 0 14 3 12 #"test-store-2"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 3 #"v*s"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 6 #"arrayV"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 4 #"list"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #" ("
0 0 14 3 8 #"booleanV"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #" ("
0 0 14 3 6 #"arrayV"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 2 #"11"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 3 #"ref"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #" ["
0 0 21 3 2 #"15"
0 0 24 3 4 #"]}) "
0 0 14 3 12 #"test-binding"
0 0 24 3 1 #" "
0 0 14 3 16 #"test-store-array"
0 0 24 3 2 #") "
0 0 19 3 4 #"\"Not"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 3 #"ref"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #" ["
0 0 21 3 1 #"4"
0 0 24 3 4 #"]}) "
0 0 14 3 12 #"test-binding"
0 0 24 3 1 #" "
0 0 14 3 16 #"test-store-array"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 3 #"v*s"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 2 #"11"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 4 #"list"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #" ("
0 0 14 3 8 #"booleanV"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #" ("
0 0 14 3 6 #"arrayV"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 2 #"11"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 2 #"11"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 1 #"p"
0 0 24 3 2 #" ["
0 0 21 3 2 #"15"
0 0 24 3 2 #"] "
0 0 14 3 2 #"<-"
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 3 #"}) "
0 0 14 3 12 #"test-binding"
0 0 24 3 1 #" "
0 0 14 3 16 #"test-store-array"
0 0 24 3 2 #") "
0 0 19 3 4 #"\"Not"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 1 #"p"
0 0 24 3 2 #" ["
0 0 21 3 1 #"4"
0 0 24 3 2 #"] "
0 0 14 3 2 #"<-"
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 3 #"}) "
0 0 14 3 12 #"test-binding"
0 0 24 3 1 #" "
0 0 14 3 16 #"test-store-array"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 3 #"v*s"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 4 #"list"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #" ("
0 0 14 3 8 #"booleanV"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #" ("
0 0 14 3 6 #"arrayV"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 2 #"11"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"list-exprs"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #") ("
0 0 14 3 9 #"newArrayC"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 21 #"get-values-eval-store"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 15 #"get-values-eval"
0 0 24 3 1 #" "
0 0 14 3 10 #"list-exprs"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 1 #" "
0 0 14 3 21 #"get-values-eval-store"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"lv*s"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 6 #"arrayV"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 25 #"update-store-bind-symbols"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"b"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                 "
0 0 14 3 5 #"empty"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                 "
0 0 14 3 5 #"empty"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"env*s"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"bind"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 4 #"bind"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 25 #"update-store-bind-symbols"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"b"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                 "
0 0 14 3 5 #"empty"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"env*s"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"bind"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 4 #"bind"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 9 #"serialize"
0 0 24 3 2 #" ("
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 8 #"booleanV"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 3 #")) "
0 0 19 3 5 #"\"true"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 9 #"serialize"
0 0 24 3 2 #" ("
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 8 #"booleanV"
0 0 24 3 1 #" "
0 0 14 3 5 #"false"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 3 #")) "
0 0 19 3 6 #"\"false"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"true"
0 0 24 3 4 #"}) ("
0 0 14 3 8 #"booleanC"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 5 #"false"
0 0 24 3 4 #"}) ("
0 0 14 3 8 #"booleanC"
0 0 24 3 1 #" "
0 0 14 3 5 #"false"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"{{"
0 0 14 3 2 #"fn"
0 0 24 3 2 #" {"
0 0 14 3 5 #"seven"
0 0 24 3 3 #"} ("
0 0 14 3 5 #"seven"
0 0 24 3 2 #")}"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                     {{"
0 0 14 3 2 #"fn"
0 0 24 3 2 #" {"
0 0 14 3 5 #"minus"
0 0 24 3 3 #"} {"
0 0 14 3 2 #"fn"
0 0 24 3 5 #" {} ("
0 0 14 3 5 #"minus"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 3 #") ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 4 #"))}}"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      {"
0 0 14 3 2 #"fn"
0 0 24 3 2 #" {"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #"} ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 7 #"))}}}) "
0 0 14 3 5 #"empty"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 3 #") ("
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 1 #" "
0 0 14 3 5 #"false"
0 0 24 3 3 #"}) "
0 0 14 3 5 #"empty"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 3 #") ("
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 8 #"booleanV"
0 0 24 3 1 #" "
0 0 14 3 5 #"false"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 3 #"}) "
0 0 14 3 5 #"empty"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 3 #") ("
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 8 #"booleanV"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #"}) "
0 0 14 3 5 #"empty"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 3 #") ("
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 8 #"booleanV"
0 0 24 3 1 #" "
0 0 14 3 5 #"false"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 2 #"`3"
0 0 24 3 3 #") ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 14 3 3 #"xxx"
0 0 24 3 3 #") ("
0 0 14 3 3 #"idC"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"xxx"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 2 #"if"
0 0 24 3 2 #" {"
0 0 14 3 2 #"<="
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #"} "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #"})"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"binop"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"<="
0 0 24 3 2 #" ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #") ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #") ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 4 #"}) ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"booleanC"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 3 #") ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #") ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 5 #"false"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 4 #"}) ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"booleanC"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #") ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #") ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 14 #"get-list-exprC"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"{{"
0 0 14 3 1 #"z"
0 0 24 3 1 #" "
0 0 14 3 1 #"="
0 0 24 3 2 #" {"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 1 #" "
0 0 21 3 2 #"14"
0 0 24 3 4 #"}} {"
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 2 #"98"
0 0 24 3 3 #"}} "
0 0 14 3 5 #"empty"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 5 #"binop"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 3 #") ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 2 #"14"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 2 #"98"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 10 #"get-params"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"{{"
0 0 14 3 1 #"z"
0 0 24 3 1 #" "
0 0 14 3 1 #"="
0 0 24 3 2 #" {"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 1 #" "
0 0 21 3 2 #"14"
0 0 24 3 4 #"}} {"
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 2 #"98"
0 0 24 3 3 #"}} "
0 0 14 3 5 #"empty"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"z"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"y"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 2 #"fn"
0 0 24 3 2 #" {"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 5 #"}}) ("
0 0 14 3 4 #"lamC"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 5 #"binop"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 3 #"idC"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 3 #"idC"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"y"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #"}) "
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"bind"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 4 #"bind"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 5 #")))) "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 2 #"17"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #"}) "
0 0 14 3 5 #"empty"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 3 #") ("
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 10 #"get-params"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"{{"
0 0 14 3 1 #"z"
0 0 24 3 1 #" "
0 0 14 3 1 #"="
0 0 24 3 2 #" {"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 1 #" "
0 0 21 3 2 #"14"
0 0 24 3 4 #"}} {"
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 2 #"98"
0 0 24 3 3 #"}} "
0 0 14 3 5 #"empty"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"z"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"y"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 10 #"get-params"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"{} "
0 0 14 3 5 #"empty"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 2 #" {"
0 0 14 3 2 #"if"
0 0 24 3 2 #" {"
0 0 14 3 2 #"<="
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #"} "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 4 #"}}) "
0 0 14 3 5 #"empty"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 3 #") ("
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 8 #"booleanV"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 14 3 4 #"true"
0 0 24 3 3 #") ("
0 0 14 3 8 #"booleanC"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 14 3 4 #"true"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 3 #") ("
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 8 #"booleanV"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 5 #"num<="
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #") ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 4 #")) ("
0 0 14 3 8 #"booleanV"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 5 #"num<="
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 3 #") ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #")) ("
0 0 14 3 8 #"booleanV"
0 0 24 3 1 #" "
0 0 14 3 5 #"false"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 5 #"num<="
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 3 #") ("
0 0 14 3 8 #"booleanV"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 3 #")) "
0 0 19 3 1 #"\""
0 0 19 3 3 #"one"
0 0 19 3 1 #" "
0 0 19 3 8 #"argument"
0 0 19 3 1 #" "
0 0 19 3 3 #"was"
0 0 19 3 1 #" "
0 0 19 3 3 #"not"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 7 #" number"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 6 #"numeq?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"booleanV"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 3 #") ("
0 0 14 3 8 #"booleanV"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 4 #")) ("
0 0 14 3 8 #"booleanV"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 6 #"numeq?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"booleanV"
0 0 24 3 1 #" "
0 0 14 3 5 #"false"
0 0 24 3 3 #") ("
0 0 14 3 8 #"booleanV"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 4 #")) ("
0 0 14 3 8 #"booleanV"
0 0 24 3 1 #" "
0 0 14 3 5 #"false"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 6 #"numeq?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 3 #") ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 4 #")) ("
0 0 14 3 8 #"booleanV"
0 0 24 3 1 #" "
0 0 14 3 5 #"false"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 6 #"numeq?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 3 #") ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 4 #")) ("
0 0 14 3 8 #"booleanV"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 6 #"numeq?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 3 #") ("
0 0 14 3 8 #"booleanV"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 4 #")) ("
0 0 14 3 8 #"booleanV"
0 0 24 3 1 #" "
0 0 14 3 5 #"false"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 4 #"}) ("
0 0 14 3 5 #"binop"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 14 3 8 #"booleanC"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 2 #"if"
0 0 24 3 3 #"}) "
0 0 19 3 4 #"\"bad"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #"}) "
0 0 14 3 5 #"empty"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 3 #") ("
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 8 #"booleanV"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 4 #"}) ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"booleanC"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 3 #") ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #") ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #"}) "
0 0 14 3 5 #"empty"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 3 #") ("
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 5 #"false"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #"}) "
0 0 14 3 5 #"empty"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 3 #") ("
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 9 #"serialize"
0 0 24 3 2 #" ("
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 3 #")) "
0 0 19 3 2 #"\"3"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 9 #"serialize"
0 0 24 3 2 #" ("
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 8 #"booleanV"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 3 #")) "
0 0 19 3 5 #"\"true"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"z"
0 0 24 3 1 #" "
0 0 14 3 1 #"="
0 0 24 3 2 #" {"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 1 #" "
0 0 21 3 2 #"14"
0 0 24 3 4 #"}} {"
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 2 #"98"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #"}})"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"appC"
0 0 24 3 2 #" ("
0 0 14 3 4 #"lamC"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"z"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 5 #"binop"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 3 #"idC"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"z"
0 0 24 3 3 #") ("
0 0 14 3 3 #"idC"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"y"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 5 #"binop"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 3 #") ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 2 #"14"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 2 #"98"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 14 3 4 #"true"
0 0 24 3 3 #") ("
0 0 14 3 8 #"booleanC"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 2 #"fn"
0 0 24 3 2 #" {"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #"} "
0 0 21 3 1 #"3"
0 0 24 3 3 #"}) "
0 0 19 3 4 #"\"dup"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 8 #"top-eval"
0 0 24 3 1 #" "
0 0 21 3 2 #"`1"
0 0 24 3 2 #") "
0 0 19 3 2 #"\"1"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"{{"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #"} {"
0 0 14 3 2 #"<="
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 5 #"}}) ("
0 0 14 3 4 #"appC"
0 0 24 3 2 #" ("
0 0 14 3 5 #"binop"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #") ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 5 #"binop"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"<="
0 0 24 3 2 #" ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #") ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 5 #"false"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 4 #"}) ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"booleanC"
0 0 24 3 1 #" "
0 0 14 3 5 #"false"
0 0 24 3 3 #") ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #") ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 2 #"fn"
0 0 24 3 2 #" {"
0 0 14 3 1 #"x"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 5 #"}}) ("
0 0 14 3 4 #"lamC"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 5 #"binop"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #") ("
0 0 14 3 3 #"idC"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 14 #"check-if-binop"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"+"
0 0 24 3 2 #") "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 14 #"check-if-binop"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"*"
0 0 24 3 2 #") "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 14 #"check-if-binop"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"-"
0 0 24 3 2 #") "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 14 #"check-if-binop"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"/"
0 0 24 3 2 #") "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 14 #"check-if-binop"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"eq?"
0 0 24 3 2 #") "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 14 #"check-if-binop"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"f"
0 0 24 3 2 #") "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 2 #" {"
0 0 14 3 2 #"fn"
0 0 24 3 5 #" {} {"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 4 #"}}})"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"binop"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"booleanC"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 4 #"lamC"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #" ("
0 0 14 3 5 #"binop"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #") ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" {"
0 0 14 3 2 #"fn"
0 0 24 3 5 #" {} {"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #"}} "
0 0 14 3 4 #"true"
0 0 24 3 2 #"})"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"binop"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"lamC"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #" ("
0 0 14 3 5 #"binop"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #") ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 8 #"booleanC"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 13 #"check-in-list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"d"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #") "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 13 #"check-in-list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"a"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"c"
0 0 24 3 3 #")) "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 13 #"check-in-list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"a"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"a"
0 0 24 3 3 #")) "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 9 #"get-binop"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"+"
0 0 24 3 2 #") "
0 0 14 3 4 #"num+"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 9 #"get-binop"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"*"
0 0 24 3 2 #") "
0 0 14 3 4 #"num*"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 9 #"get-binop"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"-"
0 0 24 3 2 #") "
0 0 14 3 4 #"num-"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 9 #"get-binop"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"/"
0 0 24 3 2 #") "
0 0 14 3 4 #"num/"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 9 #"get-binop"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"<="
0 0 24 3 2 #") "
0 0 14 3 5 #"num<="
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 9 #"get-binop"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"f"
0 0 24 3 2 #") "
0 0 19 3 1 #"\""
0 0 19 3 3 #"NOT"
0 0 19 3 1 #" "
0 0 19 3 1 #"A"
0 0 19 3 6 #" BINOP"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 16 #"list-has-no-dups"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"c"
0 0 24 3 3 #")) "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 16 #"list-has-no-dups"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"a"
0 0 24 3 3 #")) "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #"}) "
0 0 19 3 1 #"\""
0 0 19 3 7 #"invalid"
0 0 19 3 1 #" "
0 0 19 3 5 #"input"
0 0 19 3 1 #" "
0 0 19 3 2 #":("
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 1 #"*"
0 0 24 3 3 #"}) "
0 0 19 3 1 #"\""
0 0 19 3 7 #"invalid"
0 0 19 3 1 #" "
0 0 19 3 5 #"input"
0 0 19 3 1 #" "
0 0 19 3 2 #":("
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #"}) "
0 0 19 3 1 #"\""
0 0 19 3 7 #"invalid"
0 0 19 3 1 #" "
0 0 19 3 5 #"input"
0 0 19 3 1 #" "
0 0 19 3 2 #":("
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 1 #"*"
0 0 24 3 3 #"}) "
0 0 19 3 1 #"\""
0 0 19 3 7 #"invalid"
0 0 19 3 1 #" "
0 0 19 3 5 #"input"
0 0 19 3 1 #" "
0 0 19 3 2 #":("
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"*"
0 0 24 3 3 #"}) "
0 0 19 3 1 #"\""
0 0 19 3 7 #"invalid"
0 0 19 3 1 #" "
0 0 19 3 5 #"input"
0 0 19 3 1 #" "
0 0 19 3 2 #":("
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 2 #"if"
0 0 24 3 3 #"}) "
0 0 19 3 1 #"\""
0 0 19 3 7 #"invalid"
0 0 19 3 1 #" "
0 0 19 3 5 #"input"
0 0 19 3 1 #" "
0 0 19 3 2 #":("
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 14 3 2 #"if"
0 0 24 3 2 #") "
0 0 19 3 1 #"\""
0 0 19 3 7 #"invalid"
0 0 19 3 1 #" "
0 0 19 3 5 #"input"
0 0 19 3 1 #" "
0 0 19 3 2 #":("
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 10 #"get-values"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"{}) "
0 0 19 3 8 #"\"Invalid"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 18 #"not-valid-symbols?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"+"
0 0 24 3 3 #")) "
0 0 19 3 8 #"\"Invalid"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 4 #"num-"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 3 #") ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 4 #"num*"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 3 #") ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 4 #"num/"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 3 #") ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 4 #"num/"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 3 #") ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")) "
0 0 19 3 9 #"\"Division"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 4 #"num-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"booleanV"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 3 #") ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 3 #")) "
0 0 19 3 4 #"\"one"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 4 #"num*"
0 0 24 3 2 #" ("
0 0 14 3 8 #"booleanV"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 3 #") ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 3 #")) "
0 0 19 3 4 #"\"one"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 4 #"num/"
0 0 24 3 2 #" ("
0 0 14 3 8 #"booleanV"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 3 #") ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 3 #")) "
0 0 19 3 4 #"\"one"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 4 #"num+"
0 0 24 3 2 #" ("
0 0 14 3 8 #"booleanV"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 3 #") ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 3 #")) "
0 0 19 3 4 #"\"one"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 2 #"fn"
0 0 24 3 2 #" {"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #"} "
0 0 21 3 1 #"5"
0 0 24 3 3 #"}) "
0 0 19 3 6 #"\"input"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #"}) "
0 0 19 3 1 #"\""
0 0 19 3 7 #"invalid"
0 0 19 3 1 #" "
0 0 19 3 5 #"input"
0 0 19 3 1 #" "
0 0 19 3 2 #":("
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 1 #"*"
0 0 24 3 3 #"}) "
0 0 19 3 1 #"\""
0 0 19 3 7 #"invalid"
0 0 19 3 1 #" "
0 0 19 3 5 #"input"
0 0 19 3 1 #" "
0 0 19 3 2 #":("
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #"}) "
0 0 19 3 1 #"\""
0 0 19 3 7 #"invalid"
0 0 19 3 1 #" "
0 0 19 3 5 #"input"
0 0 19 3 1 #" "
0 0 19 3 2 #":("
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 1 #"*"
0 0 24 3 3 #"}) "
0 0 19 3 1 #"\""
0 0 19 3 7 #"invalid"
0 0 19 3 1 #" "
0 0 19 3 5 #"input"
0 0 19 3 1 #" "
0 0 19 3 2 #":("
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"*"
0 0 24 3 3 #"}) "
0 0 19 3 1 #"\""
0 0 19 3 7 #"invalid"
0 0 19 3 1 #" "
0 0 19 3 5 #"input"
0 0 19 3 1 #" "
0 0 19 3 2 #":("
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 2 #"if"
0 0 24 3 3 #"}) "
0 0 19 3 1 #"\""
0 0 19 3 7 #"invalid"
0 0 19 3 1 #" "
0 0 19 3 5 #"input"
0 0 19 3 1 #" "
0 0 19 3 2 #":("
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 14 3 2 #"if"
0 0 24 3 2 #") "
0 0 19 3 1 #"\""
0 0 19 3 7 #"invalid"
0 0 19 3 1 #" "
0 0 19 3 5 #"input"
0 0 19 3 1 #" "
0 0 19 3 2 #":("
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"binop"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #") ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #") ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 3 #")) "
0 0 14 3 5 #"empty"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #") "
0 0 19 3 4 #"\"if:"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 24 #"check-if-reserved-symbol"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"<="
0 0 24 3 2 #") "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 24 #"check-if-reserved-symbol"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"if"
0 0 24 3 2 #") "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 24 #"check-if-reserved-symbol"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"eq?"
0 0 24 3 2 #") "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 24 #"check-if-reserved-symbol"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"true"
0 0 24 3 2 #") "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 24 #"check-if-reserved-symbol"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"false"
0 0 24 3 2 #") "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 24 #"check-if-reserved-symbol"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"with"
0 0 24 3 2 #") "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 24 #"check-if-reserved-symbol"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"fn"
0 0 24 3 2 #") "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 24 #"check-if-reserved-symbol"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"<-"
0 0 24 3 2 #") "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 24 #"check-if-reserved-symbol"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"="
0 0 24 3 2 #") "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 24 #"check-if-reserved-symbol"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"new-array"
0 0 24 3 2 #") "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 45 #"check-if-reserved-symbol-excluding-true-false"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"<="
0 0 24 3 2 #") "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 45 #"check-if-reserved-symbol-excluding-true-false"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"if"
0 0 24 3 2 #") "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 45 #"check-if-reserved-symbol-excluding-true-false"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"with"
0 0 24 3 2 #") "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 45 #"check-if-reserved-symbol-excluding-true-false"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"fn"
0 0 24 3 2 #") "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 45 #"check-if-reserved-symbol-excluding-true-false"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"ddd"
0 0 24 3 2 #") "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 45 #"check-if-reserved-symbol-excluding-true-false"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"+"
0 0 24 3 2 #") "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 45 #"check-if-reserved-symbol-excluding-true-false"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"*"
0 0 24 3 2 #") "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 45 #"check-if-reserved-symbol-excluding-true-false"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"/"
0 0 24 3 2 #") "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 45 #"check-if-reserved-symbol-excluding-true-false"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"-"
0 0 24 3 2 #") "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 45 #"check-if-reserved-symbol-excluding-true-false"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"eq?"
0 0 24 3 2 #") "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 45 #"check-if-reserved-symbol-excluding-true-false"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"<-"
0 0 24 3 2 #") "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 45 #"check-if-reserved-symbol-excluding-true-false"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"="
0 0 24 3 2 #") "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 45 #"check-if-reserved-symbol-excluding-true-false"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"new-array"
0 0 24 3 2 #") "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 9 #"serialize"
0 0 24 3 2 #" ("
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 5 #"closV"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 3 #")) "
0 0 19 3 13 #"\"#<procedure>"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"test/exn"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"z"
0 0 24 3 1 #" "
0 0 14 3 1 #"="
0 0 24 3 2 #" {"
0 0 14 3 2 #"fn"
0 0 24 3 4 #" {} "
0 0 21 3 1 #"3"
0 0 24 3 4 #"}} {"
0 0 14 3 1 #"z"
0 0 24 3 1 #" "
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"z"
0 0 24 3 4 #"}}) "
0 0 19 3 5 #"\"dups"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 8 #"top-eval"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"{("
0 0 14 3 2 #"fn"
0 0 24 3 2 #" ("
0 0 14 3 5 #"minus"
0 0 24 3 3 #") ("
0 0 14 3 5 #"minus"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 4 #")) ("
0 0 14 3 2 #"fn"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 6 #")))}) "
0 0 19 3 2 #"\"3"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 8 #"top-eval"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"{{"
0 0 14 3 2 #"fn"
0 0 24 3 2 #" {"
0 0 14 3 10 #"multi-larg"
0 0 24 3 3 #"} {"
0 0 14 3 10 #"multi-larg"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #"}} "
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  {"
0 0 14 3 2 #"fn"
0 0 24 3 2 #" {"
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 3 #"} {"
0 0 14 3 2 #"if"
0 0 24 3 2 #" {"
0 0 14 3 2 #"<="
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #"} {"
0 0 14 3 2 #"if"
0 0 24 3 2 #" {"
0 0 14 3 2 #"<="
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 2 #"} "
0 0 24 29 1 #"\n"
0 0 24 3 50 #"                                                 {"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 2 #"} "
0 0 24 29 1 #"\n"
0 0 24 3 50 #"                                                 {"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 26 #"}}                        "
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    {"
0 0 14 3 2 #"if"
0 0 24 3 2 #" {"
0 0 14 3 2 #"<="
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 2 #"} "
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        {"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 2 #"} "
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        {"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 7 #"}}}}}) "
0 0 19 3 2 #"\"9"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 8 #"top-eval"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 9 #"new-array"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #"}) "
0 0 19 3 9 #"\"#<array>"
0 0 19 3 1 #"\""
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 8 #"top-eval"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"{{"
0 0 14 3 2 #"fn"
0 0 24 3 2 #" {"
0 0 14 3 5 #"seven"
0 0 24 3 3 #"} ("
0 0 14 3 5 #"seven"
0 0 24 3 2 #")}"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                     {{"
0 0 14 3 2 #"fn"
0 0 24 3 2 #" {"
0 0 14 3 5 #"minus"
0 0 24 3 3 #"} {"
0 0 14 3 2 #"fn"
0 0 24 3 5 #" {} ("
0 0 14 3 5 #"minus"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 3 #") ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 4 #"))}}"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      {"
0 0 14 3 2 #"fn"
0 0 24 3 2 #" {"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #"} ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 7 #"))}}}) "
0 0 19 3 2 #"\"7"
0 0 19 3 1 #"\""
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 15 3 5 #"begin"
0 0 24 3 2 #" {"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 2 #"} "
0 0 14 3 1 #"p"
0 0 24 3 3 #"}) "
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"bind"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 15 3 5 #"begin"
0 0 24 3 2 #" {"
0 0 14 3 9 #"new-array"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 2 #"} "
0 0 14 3 1 #"p"
0 0 24 3 3 #"}) "
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"bind"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 3 #"v*s"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";; Captain Teach Test Cases"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 2 #"`3"
0 0 24 3 3 #") ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 14 3 5 #"xabth"
0 0 24 3 3 #") ("
0 0 14 3 3 #"idC"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"xabth"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 4 #"}) ("
0 0 14 3 5 #"binop"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 3 #") ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"z"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"appC"
0 0 24 3 2 #" ("
0 0 14 3 3 #"idC"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"z"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 3 #") ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"z"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 2 #" ("
0 0 14 3 1 #"g"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #") "
0 0 21 3 2 #"11"
0 0 24 3 1 #" "
0 0 21 3 2 #"12"
0 0 24 3 1 #" "
0 0 21 3 2 #"13"
0 0 24 3 1 #" "
0 0 21 3 2 #"14"
0 0 24 3 1 #" "
0 0 21 3 2 #"15"
0 0 24 3 1 #" "
0 0 21 3 2 #"16"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"appC"
0 0 24 3 2 #" ("
0 0 14 3 3 #"idC"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"z"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 3 #") ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 3 #") ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 3 #") ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 3 #") ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 3 #") ("
0 0 14 3 4 #"appC"
0 0 24 3 2 #" ("
0 0 14 3 3 #"idC"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"g"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 61
#"                                                            ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 2 #"11"
0 0 24 3 3 #") ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 2 #"12"
0 0 24 3 3 #") ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 2 #"13"
0 0 24 3 3 #") ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 2 #"14"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 2 #"15"
0 0 24 3 3 #") ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 2 #"16"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";; fundefs"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 2 #"fn"
0 0 24 3 4 #" {} "
0 0 21 3 1 #"3"
0 0 24 3 4 #"}) ("
0 0 14 3 4 #"lamC"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 3 #") ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 7 #";; with"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"z"
0 0 24 3 1 #" "
0 0 14 3 1 #"="
0 0 24 3 2 #" {"
0 0 14 3 2 #"fn"
0 0 24 3 4 #" {} "
0 0 21 3 1 #"3"
0 0 24 3 4 #"}} {"
0 0 14 3 1 #"z"
0 0 24 3 3 #"}})"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"appC"
0 0 24 3 2 #" ("
0 0 14 3 4 #"lamC"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"z"
0 0 24 3 3 #") ("
0 0 14 3 4 #"appC"
0 0 24 3 2 #" ("
0 0 14 3 3 #"idC"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"z"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"lamC"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 3 #") ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";; NEW FOR 2144:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 4 #"with"
0 0 24 3 2 #" {"
0 0 14 3 1 #"z"
0 0 24 3 1 #" "
0 0 14 3 1 #"="
0 0 24 3 2 #" {"
0 0 14 3 2 #"fn"
0 0 24 3 4 #" {} "
0 0 21 3 1 #"3"
0 0 24 3 4 #"}} {"
0 0 14 3 1 #"q"
0 0 24 3 1 #" "
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"z"
0 0 24 3 3 #"}})"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"appC"
0 0 24 3 2 #" ("
0 0 14 3 4 #"lamC"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"z"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"q"
0 0 24 3 3 #") ("
0 0 14 3 4 #"appC"
0 0 24 3 2 #" ("
0 0 14 3 3 #"idC"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"z"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"lamC"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 3 #") ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";; if"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"{"
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #"})"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #") ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 3 #") ("
0 0 14 3 4 #"numC"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 8 #"top-eval"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"{{"
0 0 14 3 2 #"fn"
0 0 24 3 2 #" {"
0 0 14 3 8 #"function"
0 0 24 3 3 #"} {"
0 0 14 3 8 #"function"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 4 #"}} {"
0 0 14 3 2 #"fn"
0 0 24 3 2 #" {"
0 0 14 3 1 #"x"
0 0 24 3 3 #"} {"
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 6 #"}}})  "
0 0 19 3 3 #"\"5\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0           0
