(test/exn (parse '{+ / 3}) "invalid input :(") 
(test/exn (parse '{+ 2 *}) "invalid input :(") 
(test/exn (parse '{+ - 3}) "invalid input :(") 
(test/exn (parse '{+ if *}) "invalid input :(") 
(test/exn (parse '{+ + *}) "invalid input :(") 
(test/exn (parse '{if}) "invalid input :(")
(test/exn (parse `if) "invalid input :(")

(test (parse '{if false 3 4}) (if (booleanC false) (numC 3) (numC 4)))

(test (parse `3) (numC 3))
(test (parse `xxx) (idC 'xxx))
(test (parse `true) (booleanC true))
(test (parse `false) (booleanC false))
(test (parse '{+ 5 2}) (binop '+ (numC 5) (numC 2)))
(test (parse '{- 5 2}) (binop '- (numC 5) (numC 2)))
(test (parse '{* 5 2}) (binop '* (numC 5) (numC 2)))
(test (parse '{/ 5 2}) (binop '/ (numC 5) (numC 2)))
(test (parse '{eq? 5 2}) (binop 'eq? (numC 5) (numC 2)))
(test (parse '{<= 5 2}) (binop '<= (numC 5) (numC 2)))
(test (parse '{if {<= 3 5} 3 5}) 
      (if (binop '<= (numC 3) (numC 5)) (numC 3) (numC 5)))
(test (parse '{if true 3 5}) (if (booleanC #t) (numC 3) (numC 5)))
(test (parse '{if false 3 5}) (if (booleanC #f) (numC 3) (numC 5)))
(test (parse '{{+ 3 5} {<= 5 3}}) (appC (binop '+ (numC 3) (numC 5)) (list (binop '<= (numC 5) (numC 3)))))

(test (parse '{fn {x} {+ 5 x}}) (lamC (list 'x) (binop '+ (numC 5) (idC 'x))))
(test (parse '{with {z = {+ 9 14}} {y = 98} {+ z y}}) 
      (appC (lamC (list 'z 'y) (binop '+ (idC 'z) (idC 'y))) 
            (list (binop '+ (numC 9) (numC 14)) (numC 98))))